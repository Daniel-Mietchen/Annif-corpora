http://www.yso.fi/onto/yso/p23490 Visual Studio
Visual Studio Visual Studio
Mikrokontrolleripohjaisen palovaroittimen ohjelmistokehitys
Valmistuksenohjausjärjestelmän suunnittelu ja toteutus
Sähköisen rekrytointijärjestelmän vaatimusmäärittely
Työaikahallinnan toteutus : matkailualan toiminnanohjausjärjestelmään
Tekla Structures -liitoksen kehittäminen
Käyttöliittymän informatiivisuus : Skynet-kommunikaatiojärjestelmän viestijärjestelmän kehittäminen
Verkon laitteiden valvonta teollisuusympäristössä
Web-osion rakentaminen SEAMK-opiskelijaportaaliin
ARM-opetusympäristön kehittäminen
Medicine Time -lääkemuistutin : Sovelluksen kehitys Windows Phone 7.5 alustalle
Hajautetut verkkopalvelut
Scrum ja .Net ohjelmistokehityksessä
Asiakasrekisteriohjelma AROAH
Topology C# testaus ja kehitys
CMDB : Konfiguraatiohallintatietokanta
Tukiaseman keskitetty testausohjelma
Raportointi Visual Studio- ja SQL Server -ympäristössä client-server -tekniikalla
Tämän opinnäytetyön tarkoituksena oli kehittää ohjelmoinnin perusteiden opetuksen avuksi soveltuva sovellus. Ohjelmointikielenä oli C# ja kehitysympäristönä toimi Microsoftin Visual Studio. Sovellus toteutettiin Windows Presentation Foundation-työpöytäsovelluksena. Teoriaosuudessa käydään läpi C#:n historiaa, ominaisuuksia ja kehitysympäristö Visual Studiota. Olio-ohjelmointi saa oman osuutensa ja ohjelmoinnin opetuksen historiaa ja opetusmetodeja käydään lyhyesti läpi. Myös avoimesta lähdekoodista kerrotaan kattavasti tärkeimmät seikat. Raportin käytännön osuudessa käydään läpi sovelluksen rakennetta, toimintaa ja katselmoidaan miten ohjelma toimii. Kuvituksena olevat lukuisat kuviot auttavat ymmärtämään ohjelmakoodia paremmin. Sovelluksen ideana on antaa käyttäjälle ohjattavaksi robotti, jota hän pystyy käyttöliittymän kontrollien avulla käskemään tekemään erilaisia toimintoja. Näitä ovat muun muassa liikkuminen alueella, piirtäminen ja piirron eri ominaisuudet kuten piirtoviivan väri, tyyppi ja paksuus. Käyttäjä pystyy myös ohjelmoimaan sovellukseen uusia toimintoja robotille valmiiksi määriteltyjen ominaisuuksien avulla. Työn tuloksena syntyi helppokäyttöinen ohjelma, jota käyttämällä ohjelmoinnin perusteita opetteleva käyttäjä pääsee tutkimaan WPF-sovelluksen peruselementtejä ja kontrolleja. Hän oppii yksinkertaisen käyttöliittymän avulla tunnistamaan, miten esimerkiksi kontrollien toiminnallisuuden mahdollistavat tapahtumametodit toimivat. Kevyt käyttöliittymä aktivoi käyttäjää tutkimaan sovelluksen toiminnallisuutta tarkemmin. C# ja WPF todistivat loogisella ja toimivalla käytettävyydellään olevansa todella hyvä vaihtoehto Windows-pohjaisten työpöytäsovellusten kehittämiseen.
Opinnäytetyössä oli tarkoituksena käydä läpi koodauksen perusteita ja sen jälkeen siirtyä Unity3D-peliohjelmointiin tekemään autopeli mobiililaitteille C#- ja Java-kielellä. Aluksi käytiin läpi perusteita, jonka jälkeen aloitettiin pelin tekeminen Unity3D:llä. Tulokseksi saatiin toimiva ja yksinkertainen peli, jonka tekemisessä oppi perusteet pelinteosta mobiililaitteille.
WLAN-verkon jatkuvatoiminen tiedonkeruujärjestelmä
Maisemanhoidon työmenetelmät ja välineet
Tulostaulu SiiPelle
Urakkatarjouksien hallintaohjelma
Visual Studio 2008 -käsikirja
Majoitus- ja lippujenvaraussovellus
MicroMate : mikrotukihenkilön apuohjelma
Järjestelmäintegraatio ja CMMI
Mittauslaitteiston tuottaman informaation jatkokäsittely
Tämä insinöörityö on tehty Softability Group OY:lle (aikaisemmin Softability OY). Tässä insinöörityössä tarkoituksena oli tutkia ja selvittää se, miten Visual Studio Team System 2010 -järjestelmää voidaan käyttää eri tuotekehitysprojekteissa osana testausta. Tässä insinöörityössä tutkittiin Visual Studio Team System 2010 järjestelmää testauksessa ja sen tarjoamia uusia ominaisuuksia ja parannuksia aikaisempaan versioon verrattuna.  Insinöörityössä perehdyttiin ohjelmiston elinkaaren hallinnan perusideaan, Microsoft Team Foundation Server-järjestelmään ja sen arkkitehtuuriin sekä siihen, miten järjestelmässä olevia työkortteja käytetään osana testausprosesseja. Tämän lisäksi insinöörityössä on tutkittu ja perehdytty myös muihin Visual Studio Team System 2010 versioon tulleisiin ominaisuuksiin.
Tietokantojen yhdistäminen järjestelmän rajapintoja hyödyntäen
Visual Studio 2008 ja ASP.NET 3.5
Tutkimuksen tarkoituksena on kartoittaa toimeksiantajan asiakasyrityksen toiminnanohjausjärjestelmän rakennetta ja toteuttaa tämän sovelluksen sisäisten riippuvuussuhteiden tarkasteluun soveltuva ohjelmisto. Työn teoreettinen viitekehys koostuu Microsoftin .NET -sovelluskehyksestä, valmiin ohjelman analysointiin soveltuvista ohjelmistoista ja uuden sekä kartoitettavan tietojärjestelmän luomisessa  käytettävien tekniikoiden esittelystä. Työn lähdemateriaalina käytetään aiheeseen liittyvän kirjallisuuden ja dokumentaation ohella myös kartoitettavan ohjelmiston lähdekoodia ja olemassaolevaa dokumentaatiota.  Kartoitettava ohjelmisto perustuu kolmikerrosarkkitehtuuriin, jossa käyttäjälle näkyvä Windows -alustalla toimiva käyttöliittymäsovellus on toteutettu Borland Delphi 4:llä ja palvelimella ajettava server -ohjelmisto C-kielellä. Toteutettava sovellus on tarkoitettu kartoitettavan ohjelmiston kehitystiimin työkaluksi. Vuosien varrella erittäin laajaksi kasvaneen järjestelmän sisäiset riippuvuussuhteet ovat monimutkaisia. Tällöin niiden ymmärtämistä helpottava työkalu vähentää inhimillisen virheen mahdollisuutta kehitys- ja muutostöiden yhteydessä ja parantaa asiakkaan tuotteen laatua. Selkiyttäminen tapahtuu jakamalla monimutkaiset kokonaisuudet pienempiin osiin ja mahdollistamalla niiden nopea tarkastelu erillisellä käyttöliittymällä. Iteraatioissa kehitetyn ohjelman muutoksen voi tämän työn tapauksessa selkeimmin huomata vertaamalla tietokannan ER (Entity Relationship) -mallin ensimmäistä versiota mallin lopulliseen versioon. Sovelluskehitys ei ole aina helppoa, jolloin asioiden  tekeminen pienissä osissa auttaa hahmottamaan käsillä olevaa työtehtävää. Järjestelmän iteratiivinen kasvattaminen helpottaa myös testaajien ja loppukäyttäjien urakkaa, sillä näin uutta testattavaa tai opittavaa tulee kerralla vähemmän.
Verkkokauppa kyselyille
Taloushallintaohjelman suunnittelu ja toteutus
Visual Studio Team System 2010 testauksessa
Soittolistojen hallintatyökalu Avaya Contact Center -järjestelmään
Topology-ohjelmiston kääntäminen .NET ympäristöön
Tiivistelmä.
C# : Windows- ja tietokantaohjelmointi
Pienyrityksen projektien kustannusseurantaohjelma
Tietovarastot : tietovarastot ohjelmistokehityksessä
Ruiskuvalumuotin suunnittelu : suunnitteluapuohjelman toteutus SolidWorks API SDK -ympäristössä
Avoimen lähdekoodin sovellus ohjelmoinnin opetuskäyttöön
Tiivistelmä:
C♯-ohjelmointi
Rautaruukin esinauhavalssaamon prosessioptimointijärjestelmän siirtäminen uuteen käyttöjärjestelmään
Hintatarkkailuohjelma
Terveystestin toteutus Web-pohjaisena kyselynä
Windows Phone : sovelluskehitys
Riippuvuussuhdekartoitus toiminnanohjausjärjestelmässä
Tiivistelmä: Terveystestin toteutus Web-pohjaisena kyselynä.
3D-pelinkehitys mobiililaitteille
Personoitava yhteenvetonäkymä graafisista raporteista
Tiivistelmä. Opinnäytetyön tavoitteena oli päivittää prosessioptimointijärjestelmän käyttöjärjestelmäalusta ja siinä olevat sovellusohjelmistot uusimpiin ohjelmistoversioihin. Työ aloitettiin kokeilemalla erillisellä PC-laitteistolla ohjelmistojen päivittämistä tai uudelleen asentamista ennen niiden toteuttamista nykyisen palvelinlaitteistokokoonpanoon. Samalla tutustuttiin sovellus- ja varusohjelmien omiin dokumentteihin päivityksistä, ominaisuuksista yms., joista voisi olla apua prosessioptimointijärjestelmän siirtämisessä.     Useimmat ohjelmistot ja käyttöjärjestelmä onnistuttiin päivittämään ilman suuria yhteensopivuusongelmia prosessioptimointijärjestelmän sovelluksen kanssa ja todennettua sen toimivuus päivitettyjen varusohjelmien kanssa uudessa käyttöjärjestelmässä. Optimointijärjestelmän komponentteja ei voitu kääntää uudemmalla varusohjelmalla ilman ohjelmisto muutoksia, mutta jo käännetyt komponentit toimivat päivitetyssä järjestelmässä. Työn aikana todettiin mahdolliseksi kääntää sovelluksen ohjelmistokomponentteja tarpeellisten muutosten jälkeen uudemmalla sovelluskehittimellä. Lisäksi koottua materiaalia ja kokemuksia voidaan käyttää hyödyksi tulevien ohjelmistopäivitysten suunnittelussa ja toteutuksessa.
