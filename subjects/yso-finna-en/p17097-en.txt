http://www.yso.fi/onto/yso/p17097 software engineering
software engineering
The 7th International Conference on eXtreme Programming and Agile Processes in Software Engineering : tutorials, workshops, activities, and keynote speeches : Oulu, Finland, June 17-22, 2006
Test-driven Java development : invoke TDD principles for end-to-end application development with Java
Quantitative approach for lightweight agile process assessment
Developing a pricing tool for Flander Oy
The quest for software requirements : probing questions to bring nonfunctional requirements into focus; proven techniques to get the right stakeholder involvement
Finnish software product business : results from the national software industry survey 2005
Software patterns, organizational learning and software process improvement
Scalability testing of a large system : an experimental study
Professional iPhone and iPad database application programming
Designing and implementing automated software testing
Interaction designer in agile process
Outlining value assessment for SW requirements
UML Based Requirement Management Process in Mobile Multimedia Software Projects
Managing software requirements : a unified approach
Visual modeling with Rational Rose 2002 and UML
Examining the benefits of the agile software development
SOA governance : governing shared services on-premise and in the cloud
Software development and professional practice
Contracting in software business : analysis of evolving contract processes and relationships
Stakeholder analysis in software-intensive systems development
Value creating sales nets : from software product provider to software solution provider
Software testing : an ISEB foundation
Combining capability assessment and value engineering : a new   two-dimensional method for software process improvement
Lessons learned in software testing : a context-driven approach
Implementing a value assessment for products : an industrial case study
Agile software development : best practices for large software development projects
SDLC 3.0 ; beyond a tacit understanding of Agile, towards the next generation of software engineering
Design for trustworthy software : tools, techniques, and methodology of developing robust software
Human aspects of software engineering
Combining Lean thinking and Agile Software Development : how do software-intensive companies use them in practice?
Feasibility report on asynchronous synthesis
Advanced use case modeling : software systems
Structured software development with the IPIDDDT method : a lean method for small agile organizations
Value creation by enterprise systems value added resellers:the case of PLM systems VARs
Investigating the causal mechanisms underlying the customization of software development methods
Agile project and service management : delivering IT services using ITIL, PRINCE2 and DSDM Atern
Finnish software product business : results of the national software industry survey 2006
The object-oriented development process : developing and managing a rboust process for object-oriented development
97 things every project manager should know : collective wisdom from the experts
Model-driven software development with UML and Java
Practical software process improvement
Quality attribute variability in software product lines : varying performance and security purposefully
The software industry / : economic principles, strategies, perspectives
Tekla news : the customer publication of Tekla oy.
Provides information on building data-centric applications for the iPhone and the iPad, covering such topics as SQLite, TableView, core data, XCode, schema migration, Cocoa, XML, and Web services.
Handbook of the secure agile software development life cycle
Adoption of agile software development in Vietnam
Lean thinking in software development : impacts of Kanban on projects
Mastering software quality assurance : best practices, tools and techniques for software developers
Experiences of a value assessment for products
Methods and tools for collaborative networked organizations
Software engineering risk management : a method, improvement framework, and empirical evaluation
An intention-driven approach for usability-related requirements engineering : interaction design of innovative software products for consumer market.
Model-driven software development
Developing a. net web service for handling student data
Data clustering in C++ : an object-oriented approach
"Professional testing of software is an essential task that requires a profound knowledge of testing techniques. The International Software Testing Qualifications Board (ISTQB) has developed a universally accepted, international qualification scheme aimed at software and system testing professionals, and has created the Syllabi and Tests for the "Certified Tester." Today about 300,000 people have taken the ISTQB certification exams. The authors of Software Testing Foundations, 4th Edition, are among the creators of the Certified Tester Syllabus and are currently active in the ISTQB. This thoroughly revised and updated fourth edition covers the "Foundations Level" (entry level) and teaches the most important methods of software testing. It is designed for self-study and provides the information necessary to pass the Certified Tester-Foundations Level exam, version 2011, as defined by the ISTQB. Also in this new edition, technical terms have been precisely stated according to the recently revised and updated ISTQB glossary. Topics covered: Fundamentals of Testing Testing and the Software Lifecycle Static and Dynamic Testing Techniques Test Management Test Tools Also mentioned are some updates to the syllabus that are due in 2015"--
A software implementation of the requirements abstraction model
Abstract: Selektor application
Software testing practice : test management : a study guide for the Certified Tester Exam ISTQB (advanced level, ISTQB compliant)
Impact mapping : making a big impact with software products and projects
SaaS entrepreneur : the definitive guide to succeeding in your cloud application business
Software productivity
Automatic portability testing
Towards a value-based approach in software engineering
Regulating secure software development : analysing the potential regulatory solutions for the lack of security in software
Perspectives on the future of software engineering : essays in honor of Dieter Rombach
Scalability is a characteristic of software that enables efficient use of hardware resources on different load levels. The objective of this study was to experiment with and evaluate scalability testing practices. The research method was based on action research. A scalability test was conducted on a large network management system in April-October 2015. Three test rounds were completed with different loads. Performance metrics were used as indicators for system stability at different load levels. Detailed test results were regarded as confidential, thus they were not included in the report.  The test was successful and scalability bottlenecks were found. It was unexpected that also several functionality defects were detected. This could be caused by having a differ-ent focus of testing in this experiment than in typical release testing. Recommendations for best practices were listed for future use. Based on the experiment, it seems useful to conduct scalability testing as a separate test type. In future projects, it would be interesting to compare subsequent releases with some scalability metrics. In addition, the variables in capacity and scalability testing could be investigated more, especially in reference to cloud computing, so that practices for testing could be established.
Development of agile software production to the organisation
Advanced software testing. Vol. 2 : Guide to the ISTQB Advanced Certification as an Advanced Test Manager
Software process improvement and capability determination of agile software processes
Design science methodology for information systems and software engineering
Cross-functional interaction during the early phases of user-centered software new product development : reconsidering the common area of interest
The developer's guide to debugging
Development of module test automation
Evaluation of model-based testing in 3G mobile networks software development
Application architecture for WebSphere : a practical approach to building WebSphere applications
Third party software component management - the sourcing point of view
On enriching requirements engineering work using icons
The impacts of various implementing options for non-functional software requirements : case: label factory's production systems
Software and systems engineering : reference model for product line engineering and management
Towards the learning grid : advances in human learning services
Value creation in collaboration between software suppliers and customers: suppliersâ€™ perspective
Value creation by enterprise systems value added resellers : the case of PLM systems VARs
Innovation in the software sector
Aspect-oriented approach to testing : experiences from a smartphone product family
Assessing value of SW requirements
Bluetooth audio streaming user interface testing process
Improving supplier productivity with metrics
Effective software project management
No doubt, you've heard many claims about how some tool, technology, or practice improves software development. But which claims are verifiable? In this book, leading thinkers offer essays that uncover the truth and unmask myths commonly held among the software development community.
Software testing foundations : a study guide for the certified tester exam : foundation level, ISTQB compliant
Metrics in SDL
Finnish software product business : results from the national software industry survey 2003
Measurement-based value alignment and reasoning about organizational goals and strategies : studies with the ICT industry
A metamodeling framework for software engineering
Selektor application : aspects of modern design
Metamodelling for software engineering
Web application performance testing
Abstract: Metrics in SDL.
The digital assembly line
Measurement-based value alignment and reasoning about organizational goals and strategies:studies with the ICT industry
Essentials of software engineering
Evaluating software architectures : case IT Mill toolkit
Emerging methods, technologies and process management in software engineering
Customer responsibilities
Making software : what really works, and why we believe it
ProspectBa : platform for collaborative exploration of product innovation opportunities
Long short-term memory recurrent neural networks
Two case studies on real time quality cost measurement in software business
Improving the engineering process area at Ericsson with agile practices : a case study
Open systems and standards for software product development
Continuous Software Engineering
An optimized implementation of a model-based performance exploration and testing tool
Summary.
Practicing software engineering in the 21st century
Model processing operations for the Unified Modeling Language
Abstract: Efficient content management with CM Synergy.
Development of the WikiDossier software
Model-driven development of control applications : modeling tools, simulations and safety
The art of application performance testing
Supporting collaborative development:cognitive challenges and solutions of developing embedded systems
Supporting collaborative development : cognitive challenges and solutions of developing embedded systems
Software evolution and feedback : theory and practice
Test-driven development in Microsoft(R) .NET
Pragmatic version control using Subversion
Developing value assessment for SW architecture
Abstract: Development of module test automation.
Effective prototyping for software makers
Improving the effort management of the non-construction activities in custom software development projects
The role of commitment in software process improvement
Three Case-Studies on Common Software Process Problems in Software Company Acquisitions
Domain-driven design : using naked objects
Software process capability and maturity determination:BOOTSTRAP methodology and its evolution
Software development has been progressively transforming into distributed development during the last decade. Software outsourcing has been using increasingly more suppliers in low cost countries, such as India and China. Projects implemented in these countries have been criticized for higher business cost eventually due to lower productivity and quality than projects in western countries. The question when to make or buy has led to the need for measuring suppliers. However, measuring subcontractors is not a straightforward issue. Both productivity and quality do not have simple reliable indicators and they both affect each other. The main objective in this thesis was to find a set of metrics that could measure the subcontractor and help them to focus on continuous improvement. Other objectives were to find communication, agile ways of working and tools for improving productivity. The final objective was to study how to increase innovation activities. The metrics were first piloted in two projects and then they were taken into wider use in the company. Case study was chosen as the study strategy. Members of four dfferent projects were interviewed using earlier studies and personal experience as the theroretical framework. The interview material was analysed using content analysis. The main result of the study was a set of metrics consisting of three parts: content, quality and Net Promoter Score. The supplier could not be compared with these metrics but these metrics enhanced communication and continuous improvement in projects. Daily scrums were seen as the best agile principle and the findings about tools for productivity were slim: non-working tools have an extensive negative effect. The last finding involves innovations: as long as outsourcing is expected to be cost-effective with tight schedules, innovative ideas are not to be expected.
The capability maturity model : guidelines for improving the software process
Assessing value of SW architecture
Finnish software product business : results from the national software industry survey 2004
Improving test case review technique in Messaging test team
Drive for future software leverage : the role, importance, and future challenges of software competences in Finland
Discourses on 'culture' and 'usability work' in software product development
Graphical user interface for creating licenses
Measuring in the software process : how practice meets theory
Risk-based testing in software development projects
Dynamics of software development
Tieto Software Product Quality Analysis System
Efficient content management with CM Synergy
ISO/IEC 26550:2013 provides a reference model consisting of an abstract representation of the key processes of software and systems product line engineering and management, and the relationships between the processes. In the product line there are two development lifecycles (domain engineering and application engineering), the involvement of variabilities, and two process groups (organizational management and technical management). Domain Engineering lifecycle processes define and implement domain assets commonly used by member products within a product line, while Application Engineering lifecycle processes develop applications by exploiting the domain assets including common and variable assets. During domain engineering, product line variability, which reflects the specific needs of different markets and market segments, are explicitly defined. Variabilities are embedded in domain assets and during application engineering they are selected based on the defined variability models. Organizational Management process group helps organizations to establish and improve capabilities for nurturing their product lines from conception to retirement and for establishing and managing relationships with customers, providers, and other key stakeholders. Meanwhile, Technical Management process group provides actual means used to support, monitor, and control the activities of both domain engineering and application engineering of a product line. The reference model for software and systems product line engineering and management of ISO/IEC 26550:2013 can be used in subsequent standardization efforts to create appropriate standards for requirements engineering and management, design, realization, verification and validation, and organizational and technical management processes, tools, and methods of software and systems product line engineering.
Software testing : interview questions
Succeeding with open source
Finnish software product business : results from the national software industry survey 2002
Improving the software inspection process with patterns
Yhteenveto (Finnish summary)
Software ecosystems : analyzing and managing business networks in the software industry
Towards a meta-method for the engineering of situational evaluation methods for domain-specific modeling tools
Assessing value of SW architecture : a case study
Agile software development teams : the impact of agile development on team performance
Agile project and service management : delivering IT services using ITIL, PRINCE2 and DSDM
An information system design product theory for the class of eSourcing requirements, delivery and completion management systems for eSourcing service providers
Abstract in Finnish.
A practical guide to SysML : the systems modeling language
Experiences of implementing a value-based approach to software process and   product assessment
Advanced software testing. Vol. 1 : Guide to the ISTQB Advanced Certification as an Advanced Test Analyst
Making the best of a merger : a case study of Product Data Management Application Development Team
