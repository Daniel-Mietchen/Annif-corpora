http://www.yso.fi/onto/yso/p27066 software design
software design
This book illustrates how goal-oriented, automated measurement can be used to create Lean organizations and to facilitate the development of Lean software, while also demonstrating the practical implementation of Lean software development by combining tried and trusted tools. In order to be successful, a Lean orientation of software development has to go hand in hand with a company's overall business strategy. To achieve this, two interrelated aspects require special attention: measurement and experience management. In this book, Janes and Succi provide the necessary knowledge to establish "Lean software company thinking", while also exploiting the latest approaches to software measurement. A comprehensive, company-wide measurement approach is exactly what companies need in order to align their activities to the demands of their stakeholders, to their business strategy, etc. With the automatic, non-invasive measurement approach proposed in this book, even small and medium-sized enterprises that do not have the resources to introduce heavyweight processes will be able to make their software development processes considerably more Lean. The book is divided into three parts. Part I, "Motivation for Lean Software Development", explains just what "Lean Production" means, why it can be advantageous to apply Lean concepts to software engineering, and which existing approaches are best suited to achieving this. Part II, "The Pillars of Lean Software Development", presents the tools needed to achieve Lean software development: Non-invasive Measurement, the Goal Question Metric approach, and the Experience Factory. Finally, Part III, "Lean Software Development in Action", shows how different tools can be combined to enable Lean Thinking in software development.
Interaction designer in agile process
Understanding computers : today and tomorrow. Comprehensive
Software development and professional practice
Agile software development practices in the software project work education
Automatic Repeat-Request Courseware
Agile development in the real world
Information dashboard design : displaying data for at-a-glance monitoring
Software design for a Smart Lock System for Home Automation
Real-time systems development
AUTOMATIC TEST CREATION ENVIRONMENT WITH AN INDUSTRIAL ROBOT
Automatic test creation environment with industrial robot
Human aspects of software engineering
Modeling software behavior : a craftsman's approach
The design and implementation of a hydroponics control system
3D user interfaces : theory and practice
Model-based testing of software systems : functionality and performance
Lean software development in action
Aligning enterprise, system, and software architectures
Requirements engineering for software and systems
Guide to advanced empirical software engineering
Maximizing Customer Value: Better Software and Web Solutions through Iteration of Use Cases
An active attitude and the spirit of doing : hands-on work and results at the Information Technology department of Oulu UAS
Agile processes, in software engineering, and Extreme Programming : 16th International Conference, XP 2015, Helsinki, Finland, May 25-29, 2015 : proceedings
Community-centric mobile peer-to-peer services: performance evaluation and user studies
Social thinking - software practice
Measuring software security from the design of software
Domain-specific modeling : enabling full code generation
This book contains the refereed proceedings of the 15th International Conference on Agile Software Development, XP 2014, held in Rome, Italy, in May 2014. Because of the wide application of agile approaches in industry, the need for collaboration between academics and practitioners has increased in order to develop the body of knowledge available to support managers, system engineers, and software engineers in their managerial/economic and architectural/project/technical decisions. Year after year, the XP conference has facilitated such improvements and provided evidence on the advantages of agile methodologies by examining the latest theories, practical applications, and implications of agile and lean methods. The 15 full papers, seven short papers, and four experience reports accepted for XP 2014 were selected from 59 submissions and are organized in sections on: agile development, agile challenges and contracting, lessons learned and agile maturity, how to evolve software engineering teaching, methods and metrics, and lean development.
The Suitability of Thinking PortfolioÂ® Software in Project Reporting. Case: Cargotec
Creating a web based application : case theater seat reservation system
Interactive system design : innovative user interfaces
An intention-driven approach for usability-related requirements engineering : interaction design of innovative software products for consumer market.
Evolving a co-located process model for globally distributed software development
A contingency framework to assure the user-centered quality and to support the design of anti-phishing software
Designing organizational systems : an interdisciplinary discourse
Self-management in distributed systems : smart adaptive framework for pervasive computing environments
Abstract: Selektor application
Examining human-centered design practice in the mobile apps era
The engineering design of systems : models and methods
This thesis was born out of the idea to make hydroponic food growing easier and cheaper, hydroponics is essentially the growing of plants without the use of soil. The idea of it being open source is also in keeping with the general community feeling surrounded by the hydroponic movement. The objective of the thesis was to create a working hydroponic controller, which is cheap and simple enough to build. It will monitor and control the key environmental ingredients needed for successful hydroponic growing, chiefly the pH, EC, air and water levels. Visual alarms will be raised if these go outside of predefined ranges. The controller will also be able to control external HW, such as lights, water heater and a water pump. A circuit board was developed, which will act as a shield for an Arduino 2560 board. The circuit board will help in the ease of building the system. It acts too, as a way of keeping the HW more stable, as wires will not come loose and interference will be minimised. The SW and HW design will be available for everyone to download. Knowledge of what is important in hydroponic growing was considered and these factors were used as inputs into driving the SW and HW requirements. UI usability studies were carried out to ensure that the controller would be enjoyable to use. Software design and software patterns were taken into use to make the SW more module and expandable. Investigation into any third party SW libraries was done and consideration into licensing was carried out. This thesis details the HW and SW and why certain design decisions were made. The design of the SW classes are also described as well as the overall functioning of the SW. An explanation of how to build the system is also given.
The subject of this thesis was to produce a plug-in for the Unity engine that generates three dimensional planetary terrain models suitable to be used in game development. The plug-in has three main parts: a node editor tool within Unity editor that enables visual design of noise functions to be used on the surface, a robust code for generating 3D models during runtime and a dynamic level of detail system. This thesis details the techniques used and the results of the project. The work was based on previous knowledge learned during creating a similar application using Java. The work was implemented using the Unity engine with C# programming language in MonoDevelop development environment. The work resulted in a working plug-in that was released in the Unity Asset Store.
Situational method engineering
From the early years of modern software development to almost up to millennium the software development was more concentrated on making applications than making the whole application lifecycle. All the parts of the application lifecycle have been existent but they have not been merged into one entity like ALM process (application lifecycle management) is doing now.    In general ALM process is divided into three main phases which Wikipedia has defined as governance, development and maintenance. Most manufacturers define and name these parts differently, which should be taken into account when discussing ALM solution with different companies or people. There is also another process called SDLC (software devel-opment lifecycle) which has been mistakenly understood equivalent with ALM. Generally speaking, SDLC covers only one part of ALM which is development.    What is ALM process anyway? If you search on the internet you get multiple answers which vary. In brief it can be defined as integrating multiple software development tools into one framework or solution where all tools interact with each other real-time. If you also include business management and engineering skills to this environment you are close to ALM.    What people or companies benefit from ALM process? ALM at its best integrates the whole application lifecycle management, automates processes and integrates tools that are related to each other. This also means that sending emails, making phone calls and having meetings about everything will not be necessary anymore. Thus, a lot of money and time will be saved.
International encyclopedia of ergonomics and human factors
Perspectives on the future of software engineering : essays in honor of Dieter Rombach
Changing the planning for agile and lean software development : from roadmapping to continuous planning
Agile experience design : a digital designer's guide to agile, lean, and continuous
"Solid requirements engineering has increasingly been recognized as the key to improved, on-time and on-budget delivery of software and systems projects. This book provides practical teaching for graduate and professional systems and software engineers. It uses extensive case studies and exercises to help students grasp concepts and techniques. With a focus on software-intensive systems, this text provides a probing and comprehensive review of recent developments in intelligent systems, soft computing techniques, and their diverse applications in manufacturing. The second edition contains 100% revised content and approximately 30% new material"--
Version control with Git
Semantic visualization for smart spaces : merging the material and digital worlds
AWARE: a mobile context instrumentation middleware to collaboratively understand human behavior
The process of strategy formation in software business : three cases from Kainuu region, Finland
Cross-functional interaction during the early phases of user-centered software new product development : reconsidering the common area of interest
Plans and situated actions : the problem of human-machine communication
On enriching requirements engineering work using icons
Agile processes in software engineering and extreme programming : 15th International Conference, XP 2014, Rome, Italy, May 26-30, 2014 : proceedings
New trends in mobile and web development 2012 : mobweb erasmus intensive programme 2.0
Approximation through interpolation in nonconvex multiobjective optimization
Lean practices applied in agile enterprise web application development project
Component-oriented development and assembly : paradigm, principles, and practice using Java
Proceedings of VikingPLoP 2012 Conference
Procedural planet generation in game development
Professional iPhone and iPod touch programming : building applications for Mobile Safari
Choreography modeling in embedded systems domain
Microsoft Project 2010 project management : real world skills for certification and beyond
Smarty : PHP template programming and applications : a step-by-step guide to building PHP web sites and applications using the Smarty templating engine
Vehicle monitoring system based on mobile platform
"This book covers both theoretical approaches and practical solutions in the processes for aligning enterprise, systems, and software architectures"--Provided by publisher.
Selektor application : aspects of modern design
ATM AND Web Bank : Multiplatform Support
Software & systems requirements engineering : in practice
Lean software development : an agile toolkit
"This book goes through the whole cycle of HCI design and implementation and explains the core and basic HCI concepts behind each step. The book uses an interface for an actual Android app, designed and evaluated from the ground up, as a concrete example. Understandable to those with minimal programming knowledge, the book provides readers with a basic working knowledge of HCI oriented software development"--
Acquisition and reuse of knowledge to design embedded software
A lightweight rich-component framework for real-time embedded systems
Integration Platform for Biomedical Image Analysis
Essential properties of open development communities : supporting growth, collaboration, and learning
Continuous Software Engineering
The Design and Implementation of a Hydroponics Control System
LEADING SOFTWARE PROJECTS  : Applying agile principles
Agile processes in software engineering and extreme programming : 14th International Conference, XP 2013, Vienna, Austria, June 3-7, 2013. Proceedings
Agent-based management systems for many-core platforms : rigorous design and efficient implementation
Supporting collaborative development : cognitive challenges and solutions of developing embedded systems
An object-oriented method to create an SGML DTD of an electronic patient record
Model-driven software engineering in practice
Informal and formal requirements specification
Competition in the Internet markets are tremendous, due to the fact that software development is cheaper than ever before due to Cloud environments, DevOps and vast scale of productive frameworks.    Companies are constantly seeking ways to enhance their design and development processes and practices to remain competitive in the market. Alma Mediapartners is no different, thesis will follow the project where today's buzzwords are taken in action to experiment new approaches to enhance company's existing software development processes.    In the ordinary project, the team participating will begin with business analysis; continue designing the solution and that then developing the solution. Web application development in Alma Mediapartners roughly consists of two phases from lifespan vice: software development project and after successful release, the small scale development. For each phase practices from Lean startup and Lean UX are tested to find what benefits these practices might bring to the business analysis and application design.    Thesis will follow how team members experienced with Agile approaches such as Scrum are able to adapt to new ideas relating to the practices and technologies used. Project team will construct from hybrid organization having members from Alma Mediapartners and foreign subcontractor. Past experience of the development team has been from building complete systems, which are well planned replacement investments. Now that the team must form the solution from entirely new setting, how will the team previously fully focused on completeness adapt to building solution iteratively based upon feedback received.    From technology point of view, the project will evaluate different technological choices which would support the Lean UX and startup principles the best. Not to forget environmental aspects how CD and DevOps will effect to the development work. Key words: lean ux, lean startup, continuous delivery, mean, mvp.
While previously available methodologies for software â like those published in the early days of object technology â claimed to be appropriate for every conceivable project, situational method engineering (SME) acknowledges that most projects typically have individual characteristics and situations. Thus, finding the most effective methodology for a particular project needs specific tailoring to that situation. Such a tailored software development methodology needs to take into account all the bits and pieces needed for an organization to develop software, including the software process, the input and output work products, the people involved, the languages used to describe requirements, design, code, and eventually also measures of success or failure. The authors have structured the book into three parts. Part I deals with all the basic concepts, terminology and overall ideas underpinning situational method engineering. As a summary of this part, they present a formal meta-model that enables readers to create their own quality methods and supporting tools. In Part II, they explain how to implement SME in practice, i.e., how to find method components and put them together and how to evaluate the resulting method. For illustration, they also include several industry case studies of customized or constructed processes, highlighting the impact that high-quality engineered methods can have on the success of an industrial software development. Finally, Part III summarizes some of the more recent and forward-looking ideas. This book presents the first summary of the state of the art for SME.
Human-computer interaction : fundamentals and practice
The game production handbook
Changing the planning for agile and lean software development:from roadmapping to continuous planning
This practical guide for novice Agile practitioners contains everything a new project manager needs to know to quickly get up to speed with Agile practices and sort out the hype and dogma of pseudo-Agile practices. It lays out general guidelines for running an Agile project, with the assumption that the project team may be working in a traditional environment (using the waterfall model, or something similar), and conveys valuable insights to multiple audiences.
A common problem with most texts on requirements specifications is that they emphasize structural models to the near exclusion of behavioral modelsâfocusing on what the software is, rather than what it does. If they do cover behavioral models, the coverage is brief and usually focused on a single model. Modeling Software Behavior: A Craftsman's Approach provides detailed treatment of various models of software behavior that support early analysis, comprehension, and model-based testing. Based on the popular and continually evolving course on requirements specification models taught by the author at universities and corporate environments, the text covers six behavioral modelsâproviding the background behind these models and the required mathematics. As evidence of models at work, the author introduces eleven continuing examples. Five of these examples are illustrated with the six models, allowing readers to easily compare the expressive power of the various models. The examples chosen reflect a wide variety of behavioral issues. Providing complete coverage that includes flowcharts, decision tables, finite state machines, two variations of Petri Nets, and StateCharts, this book will help students develop the understanding of the expressive capabilities and limitations of models of system behavior needed to make informed and appropriate choices among different models when confronted with new challenges.
Design of the SGML-based electronic patient record system with the use of object-oriented analysis methods
SOA made simple : discover the true meaning behind the buzzword that is "service oriented architecture"
Agile software development : the cooperative game
Smarty is a templating engine for PHP. This book is a comprehensive guide to the various aspects of using Smarty. It helps you to: install and configure Smarty on your Web server; understand how Smarty affects your web site architecture, and build site foundations that make the most of what Smarty offers; and more.bSmarty is a templating engine for PHP. Designers who are used to working with HTML files can work with Smarty templates, which are HTML files with simple tags while programmers work with the underlying PHP code. The Smarty engine brings the code and templates together. The result of all this is that designers can concentrate on designing, programmers can concentrate on programming, and they don't need to get in each others way so much. Even if you are developing a site on your own, Smarty is a powerful way to make your code clearer to you and others, as well as easier to debug and modify later. This book is a comprehensive guide to all aspects of using Smarty.
Ontology-driven software development
Human Technology, 2010 VOLUME 6, NUMBER 1 (The entire issue) : Special Issue on Creativity and Rationale in Software Design
Goal driven design method for software product lines
Oulu UAS educates professionals for the needs of Northern Finland, whose competence corresponds to the needs and development of working life in the region. We react quickly to the changes occurring in working life and the requirements of new competence.    At the degree programme of Information Technology we aim to develop our teaching to include more real-life project work: our curricula include increasingly more company-related projects. This way we are able to provide our students with a more realistic view of the everyday work at companies, and also improve their employment opportunities.    The purpose of this publication is to spread the word about the projects and results achieved by the students and staff of the Information Technology department. In addition to student projects, our department is also involved in many domestic and international projects well worth mentioning. Yearly, our students complete hundreds of thesis and project work. This publication also presents good examples of our successful projects.
Principles of social media monitoring and analysis software
Creating maintainable software systems with Domain-driven design
On the development of persuasive systems : a framework for designing and evaluating behaviour change support systems and its applicability for e-Health
Lean User Experience Design in Practice : A Case Study: Implementing Lean User Experience Design in Software Development
Software development process modeling : developers perspective to contemporary modeling techniques
Stakeholder interactions in cross-functional productization : the case of mobile software development
Developing a web application for storing and distributing e-invoices
Real-time software design for embedded systems
Software designers in action : a human-centric look at design work
Microinteractions
Towards better usability : usability and end-user participation in healthcare information technology systems development
The essence of software engineering : applying the SEMAT kernel
Genetic algorithms in software architecture synthesis
Designing the requirements : building applications that the user wants and needs / Scott Britton
React Native for iOS developers
Yhteenveto (Finnish summary)
React.js essentials : a fast-paced guide to designing and building scalable and maintainable web apps with React.js
Re-engineering legacy software through language conversion
Using ALM tool in quality assurance and cost-effectiveness development
An active attitude and the spirit of doing. Hands-on work and results at the Information Technology department of Oulu UAS
