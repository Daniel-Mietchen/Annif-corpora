http://www.yso.fi/onto/yso/p21530 ohjelmistokehitys
ohjelmistokehitys ohjelmistokehitys
Tekijän avainsanat: ketterät menetelmät, sisällöntuotanto.
BADS-ohjelmisto esittää ja tallentaa Teleste Oyj:n lopputuotannossa havaitut tallennetut vikatiedot. Tässä opinnäytetyössä korjattiin BADS-ohjelmiston tiettyjä toiminnallisuuksia sekä lisättiin ohjelmistoon uusia ominaisuuksia, koska ohjelman aikaisempi versio on ollut yhtiön työntekijöiden mielestä puutteellinen ja hankala käyttää. Erityisesti työssä parannettiin ohjelmiston osasijoittelu- ja kytkentäkaaviokuvien laatua. Työt tehtiin LabVIEW- ja TestStand-ohjelmilla, joita Teleste on käyttänyt jo useamman vuoden ajan. Ohjelmiston vikatietokantaan tallentava osio osaa nyt esittää osasijoittelukuvat ja kytkentäkaaviot PDF-muotoisina, ja käyttäjä pystyy tallentamaan vikatiedot painamalla PDFkuvan päälle hiiren osoittimella. PDF-kuvien esittämiseen käytetyssä ActiveX-komponentissa esiintyneiden ongelmien takia ohjelmiston vikatietoja havainnoivaan osioon päädyttiin käyttämään suuriresoluutioista PNGkuvaa PDF-kuvien sijaan. Työn aikana kehitettiin havannointi-osioon myös PDF-kuvalla toimiva versio, jota voidaan käyttää, mikäli Adobe tekee tarvittavia ohjelmapäivityksiä. Työ saatiin vaiheeseen, jossa ohjelmistoa voidaan käyttää tuotannossa, ja kun uudet moduulinumerot tulevat käyttöön, myös moduulinvalmistuksessa.
Laadukkaan ohjelmistotestauksen piirteet
Ohjelmistokehityksen ketteryys ja sen mittaaminen
Scrum-kehysrakenteen soveltaminen yksin toteutettavaan projektiin
Yleiskäyttöinen tiedostojenhallintamoduuli .NET-pohjaisille palveluille
Sovellusalustan versionnosto Suomen Posti Oyj:ssä
Pelimoottorin rakentaminen HTML5-ympäristössä
Automatisoitu testaus Symbian text shell -ympäristössä
Työn toimeksiantaja Ocuspecto Oy on tuomassa markkinoille neuro-visuaalisen toimintakyvyn mittaamiseen tarkoitettua laitetta. Laitteen tuottamien mittaustulosten tarkastelu tapahtuu pilvipalvelun avulla, joka tuottaa mittaustuloksista olennaiset raportit. Toimeksiantaja on laatinut pilvipalvelustaan konseptin, jossa tieto talletetaan anonyymisti palvelimelle, jolloin talletetuista tiedoista ei synny potilasrekisteriä. Työssä tutustuttiin protoiluun eli prototyypin rakentamiseen ja sen tuomiin hyötyihin konseptin validoinnissa. Aluksi määriteltiin palvelun perustarpeet ja tehtiin suunnitelma prototyypiltä vaadituista ominaisuuksista. Suunnittelun jälkeen pilvipalvelukonseptista rakennettiin toiminnallinen prototyyppi Microsoftin ASP.NET-ohjelmointikehystä ja Windows Azure -pilvialustaa hyödyntäen. Prototyypillä tutkittiin konseptin toimivuutta ja kartoitettiin konseptinmukaisen suunnittelun tarpeita. Protoilun todettiin olevan toimiva menetelmä konseptin työstämisessä. Jo toteutuksen alussa pystyttiin määrittelemään useita pilvipalvelun vaatimuksia niin käytettävyyden kuin teknisen toteutuksenkin osalta. Työn tuloksena saatiin protyyppi, jolla päästiin testaamaan konseptin toimivuutta oikeassa toimintaympäristössä potilastietojärjestelmää vasten. Konsepti todettiin toimivaksi tämän hetkisillä vaatimuksilla, joten konsepti etenee jatkokehitykseen.
Tässä opinnäytetyössä tehdään tutkimusta refaktoroinnista teorian ja käytännön tasolla. Opinnäytetyön tärkein tavoite oli tutkia mitä refaktorointi on, kannattaako sitä tehdä ja miten sitä voidaan soveltaa. Opinnäytetyö toimii tulevaisuudessa dokumentaationa viitekehyksessä esitellyn legacy-sovelluksen kaltaisten sovelluksien refaktorointiprojekteissa.    Opinnäytetyö koostuu teoriataustasta, viitekehyksenä olleen sovelluksen ongelmista ja niihin sovelletuista ratkaisumalleista. Teoriataustassa käydään läpi refaktoroinnin teoriaa,  testivetoista kehitystä ja automatisoitua testausta. Viitekehyksenä toimivan sovelluksen ongelmia käydään läpi yksityiskohtaisella tasolla ja niihin löydettyjä ratkaisuja ja refaktorointitoimenpiteitä esitellään käytännön esimerkein.    Teoriaosuuden kirjallisuustutkimuksen perusteella voidaan todeta, että refaktorointi on kannattavaa ja pidentää sovelluksen elinkaarta. Refaktorointiin kuuluu olennaisesti testivetoinen kehitys ja automatisoidut testit.    Viitekehyksen ongelmia selvitellessä kävi selväksi, että refaktoroinnin teoriaa oli mahdollista soveltaa käytännön ongelmien ratkaisemiseksi. Automatisoidut testit toivat selkeää hyötyä vanhaa toiminnallisuutta refaktoroidessa.    Refaktorointi on kokonaisuudessaan PHP-ohjelmistokehityksessä suhteellisen uusi ja ajankohtainen asia. Tulevaisuudessa refaktorointia tullaan tarvitsemaan jatkuvasti ja automatisoitujen testien avulla on mahdollista tehdä laadukkaampia ratkaisuja.    Opinnäytetyön viitekehyksenä oleva refaktorointiprojekti  tehtiin vuoden 2011 aikana ja tutkimusosuus ajoittui keväälle 2012.
Globaalisti hajautetun ohjelmistokehityksen hyötyjä, haasteita ja ratkaisuja : tapaustutkimus
Ohjelmistokehityksen testauksen kehittäminen
Systeemityö
Ohjelmistokehityksen laatuajattelu
Kohti Leanin mukaista ohjelmistotuotantoa
GSM-moduuli sulautetussa järjestelmässä
Asiakastietojärjestelmä Pyhtään kuntokeskukselle
Tämän opinnäytetyön tarkoituksena oli tutkia ohjelmiston kehitystyön avuksi kehiteltyjä metodeja, prosesseja ja työkaluja, joiden katsotaan kuuluvan osaksi ohjelmiston konfiguraationhallintaa. Ohjelmiston konfiguraationhallinta kehitettiin vastaamaan haasteisiin, joita alati laajenevat ja monimutkaistuvat ohjelmiston kehitysprojektit toivat tullessaan. Työssä selvitettiin teoriaa ohjelmiston konfiguroinninhallinnan prosessien taustalla, miten ne auttavat erilaisissa ohjelmiston kehitystyössä ja hallinnoinnissa ilmeneviin ongelmiin, sekä sitä, miten niitä voidaan ottaa käyttöön erilaisissa ohjelmiston kehitys ympäristöissä. Työssä selvennettiin, minkälaisiin osa-alueisiin ohjelmiston konfiguraationhallinta on määritelmänä jaoteltu, sekä minkälaisia tavoitteita kullakin osa-alueella on. Jokaisella konfiguraationhallinnan osa-alueella on selkeä tehtävä ja työssä tutkitaan mitä ohjelmistonkehityksen vaihetta kukin osa-alue edustaa. Ohjelmiston konfiguraationhallinan prosessit ovat huomattava lopputuotteen laatua parantava kokonaisuus. Tässä työssä selvitettiin minkälaisia ongelmia toimivan ohjelmiston konfiguraationhallinta prosessin puuttuminen aiheuttaa, ja minkälaisessa tilanteessa kannattaa näitä prosesseja ottaa käyttöön. Läpi käytiin asioita mitkä erilaisten ja erikokoisten ohjelmiston kehitysprojektien täytyy ottaa huomioon ottaessaan käyttöön konfiguraationhallintaa, sekä miten voidaan suunnitella jokaisen projektin omiin tarpeisiin sopiva kokonaisuus prosesseja ja työkaluja. Lisäksi selvitettiin ohjelmiston konfiguraationhallinnan automatisointiin ja laadun parantamiseen liittyviä menetelmiä.
Ohjelmistokehitys on mysteeri monelle tavalliselle ihmiselle. Yleinen käsitys on, että ohjelmistokehitys on vain ohjelmoijien istumista pienissä kopeissa toimistotiloissa. Harva tietää, että ohjelmistokehitykseen sisältyy paljon muutakin kuin vain ohjelmakoodin kirjoittamista. Tämä opinnäytetyö avaa ohjelmistokehityksen sisältöä ja pyrkii Tampereen ammattikorkeakoululle tehtyä Nurseus-hoitosuunnitelmajärjestelmän kehitystä esimerkkinä käyttäen kertomaan ohjelmistokehityksestä sellaisin termein ja kuvauksin, joita tavallinen lukija voi ymmärtää.  Lukijaa johdatellaan ensin työssä käytettyyn termistöön, jotta asioista voidaan puhua myöhemmin ilman, että lukija jää miettimään, mistä on kyse. Termien kuvaamisen jälkeen esitetään keskeiset käsitteet, joita opinnäyte-työssä käsitellään: projekti ja prosessi. Kun termit on esitelty, käydään työssä läpi Nurseus-hoitosuunnitelmajärjestelmän kehitysraportti. Raporttia hyödyntäen ohjelmiston kehitysvaiheet selitetään ja lukijalle kerrotaan, mitä ohjel-mistokehityksen vaiheissa tulee huomioida ja miten ne on huomioitu. Työssä pyritään kertomaan tavalliselle lukijalle, ettei ohjelmistokehitys ole vain ohjelmakoodin kirjoittamista. Ohjelmistokehitys esitetään vaiheittain korostaen huomioitavia asioita, kun ohjelmistokehitystä ajatellaan projektina ja kun ohjelmistokehitystä käsitellään projektia laajempana kokonaisuutena: prosessina. Käsittely aloitetaan alustavasta ohjelmiston tilauksesta ja päätetään, kun ohjelmisto on otettu käyttöön ja jätetty odottamaan jatkokehitystä. Lopulta arvioidaan, onko Nurseus -hoitosuunnitelmajärjestelmän kehityksessä onnistuttu huomioimaan opinnäytetyössä esitettyjä suuntauksia.
Ketterä ohjelmistokehitys
Lean- ja Kanban-menetelmät ohjelmistotuotannossa
Hallittu ohjelmistokehitys voittoa tavoittelemattomassa vapaaehtoistyössä
Maemo 5 ja Windows Phone 7 – Sovelluskehitysprosessien vertailu
Meego-sovelluksen suunnittelu ja ohjelmointi : CASE: EKG-pitkäaikaisrekisteröinnin päiväkirja
Scrum-projektinhallintamenetelmä
Ohjelmointirajapinnan toteutus Peloton.fi -verkkopalveluun
Oppinäytetyön tavoitteena oli suunnitella ja toteuttaa Android-sovellus, jonka avulla voidaan tallentaa muistioita. Muistioiden tallennuksen tuli olla mahdollisimman sujuvaa, eikä siitä saa aiheutua käyttäjälle turhia latausaikoja, vaikka muistion koko olisi suuri. Työ tehtiin Softeri Oy:lle, joka toimi projektin tilaajana ja toimeksiantajana. Työ aloitettiin tutustumalla Android-ohjelmointiin, PHP-ohjelmointiin sekä toimeksiantajan ohjelmistoalustaan. Ensimmäinen vaihe työstä oli Web-sovellus, johon rakennettiin sekä muistioiden hallintapaneeli että rajapinnat kommunikoimaan Android-sovelluksen kanssa. Toisessa vaiheessa valmistettiin Android-sovellus. Työkaluina projektissa toimivat NetBeans ja Eclipse. Työ eteni aikataulun mukaan. Opinnäytetyön tuloksena syntyi MediaMemo-Android-sovelluksen versio 1.0. Sovelluksen rinnalle asennettiin myös Web-sovellus, josta voidaan hallita tallennettuja muistiota.
Kykylaakso -oppimisympäristön jatkokehitys
Tiivistelmä: Tässä opinnäytetyössä tutkin, kuinka helppoa on jatkokehittää olemassa olevaa Ruby on Rails -ohjelmistokehyksellä kehitettyä verkkopalvelua. Palvelu, jota jatkokehitin opinnäytetyötä tehdessäni on nimeltään Ohjelmasuomi. Tutkin paitsi Rails-ohjelmistokehyksen, myös Ruby-ohjelmointikielen ja Railsin kanssa yleisesti käytettyjen kirjastojen, kielten ja teknologioiden vaikutusta jatkokehitettävyyteen. Työssä kerron Ruby-ohjelmointikielestä ja annan ohjeita sen käyttöön. Sen jälkeen kuvaan Rails-ohjelmistokehystä ja annan ohjeita sen käytöstä. Sitten kerron RSpec-testityökalusta. Sen jälkeen kuvaan lyhyesti Sass-tyylitiedostokieltä ja jQuery-kirjastoa, joita käytetään Ohjelmasuomen näkymissä. Lopuksi arvioin näiden kirjastojen, kielten ja teknologioiden vaikutusta jatkokehitettävyyteen. Päädyin tulokseen, että Ruby on Rails on jatkokehitettävyydeltään epätasainen kokonaisuus. Ainakin jos Ajaxia käytetään runsaasti, on vaikeaa seurata, mitä CoffeeScript-skriptit oikeastaan tekevät. Lisäksi ainakin Ohjelmasuomen koodissa hyödynnetään Railsin implisiittisiä lisäyksiä, mikä vaikeuttaa koodin seuraamista pahasti. Palvelinpuolen koodissa Rails on huomattavasti parempi, mutta en voi suositella Railsia pitkiin projekteihin.
Hajautettu Scrum
FogBugz-laajennusosa: OpenPGP:lla salatun sähköpostin automaattinen lähettäminen
TIETOJÄRJESTELMÄPROJEKTIN HALLINTA JA TESTAUS : Jouskari
Internetin kehittyminen erityisesti viimeksi kuluneen 20 vuoden aikana on johtanut yhteiskunnan voimakkaaseen digitalisoitumiseen. Tässä kehityksessä pilvipalveluilla on merkittävä rooli. Koulutuksessa niitä hyödynnetäänkin jo monin eri tavoin.     Artikkelia varten haastateltiin Sami Iljiniä, joka valmistui tradenomiksi Oulun ammattikorkeakoulun tietojenkäsittelyn koulutusohjelmasta joulukuussa 2014. Hän opiskeli web-sovelluskehityksen suuntautumisvaihtoehdossa ja osasi hyödyntää pilvipalveluja monipuolisella tavalla.     Pilvipalvelut tehostavat ohjelmistokehitystä säästäen ohjelmistokehittäjän aikaa muihin tehtäviin. Parhaimmillaan pilvipalvelut ovat helppokäyttöisiä ja joustavia. Opiskelijan kannattaa harjoitella pilvipalvelujen hyödyntämistä jo koulutuksensa aikana. Osa opiskelijan portfolioa voi koostua työnäytteistä, jotka löytyvät julkisesta pilvipalvelusta.     Pilvipalveluiden hyödyntäminen koulutuksessa ei ole ongelmatonta. Maksulliset pilvipalvelut ja koekäyttöaikojen pituudet ovat merkittäviä rajoittavia tekijöitä. Koulutusorganisaatio ei myöskään voi tarjota kaikkia mahdollisia koulutuksessa tarvittavia pilvipalveluja.     On todennäköistä, että tulevaisuudessa pilvipalvelujen henkilökohtaiset käyttöönotot yleistyvät. Tästä hyötyvät kaikki, tärkeimpänä opiskelija, joka pilvipalveluita käyttäessään oppii moderneja työelämätaitoja jo koulutuksensa aikana.
Team Foundation Server sovelluskehitysprojektin hallintatyökaluna
Pilvipalveluiden hyödyntäminen ohjelmistokehityksen koulutuksessa
Skriptikielet pelimoottoreissa
Pilvipalvelukonseptin validointi prototyypillä
Proseduraalisen tietokoneohjelman muuttaminen oliosuuntautuneeksi
Seurantamonitorin käyttöönotto ohjelmistokehityksen läpinäkyvyyden parantamiseksi
Ohjelmistotuotteen dokumentointi : kohdeyrityksenä Agenteq Solutions Oy
ATDD-ohjelmistokehysten käyttö Vaadin-sovelluskehityksessä
PhoneGap-ohjelmistokehyksen hyödyntäminen alustariippumattomassa mobiilisovelluskehityksessä
Tiivistelmä: Insinöörityössä oli tavoitteena parantaa laitteiden prosessikehityksen ja huollon tiedonkulkua. Työ toteutettiin Murata Electronics Oy:n komponenttivalmistuksen kokoonpanoon. Vastaavanlainen ohjelma oli jo käytössä Murata Electronicsin komponenttivalmistuksen testi puolella ja se oli todettu toimivaksi.    Muratan komponenttivalmistuksen kokoonpano on toiminnassa vuoden jokaisena päivänä ympäri vuorokauden, joten käyttäjiä on paljon. Laitteisiin tehdyt muutokset ja huollot eivät aina kulkeudu jokaiselle käyttäjälle, mikä tuotti ongelmia käyttäjille.    Työssä kartoitettiin erilaisia versionhallintaohjelmia. Kartoituksen ja palaverien jälkeen päätettiin kokeilla ottaa käyttöön Tortoise SVN -versionhallintaohjelma. Tarkoituksena oli ottaa ohjelma koko kokoonpanoon, mutta ensin otetaan käyttöön Muratan Cobra-linjalla, joka valmistaa yhdistelmäantureita. Pilottilaitteeksi valitsimme Esec 3100 plus wire bonder -latitteen.    Pilottilaitteen valittua perehdyttiin ohjelmaan ja sen soveltuvuuteen tiedonkulkuongelmaan. Ohjelmaan lisättiin koodia, jotta se soveltuisi kokoonpanon käyttöön paremmin. Ottaessa ohjelmaa käyttöön pilottilaitteelle suurin osa ongelmista tuli Muratan verkkojen välisistä ongelmista. Niitä yritettiin ratkaista erilaisilla verkko-ohjelmilla. Aikataulun takia työ jää pohdintaan, jatketaanko sitä vai kokeillaanko jotain muuta ratkaisua.
Generic Tool Box : Uudelleenkäytettävän projektirungon  toteuttaminen Unity-pelinkehitystyökalulle
Virpiniemen liikuntaopiston verkkopalveluiden tekninen suunnittelu
BADS-ohjelmiston päivitys ja käyttöönotto tuotannossa
Ohjelmistokehitysympäristön vakiointi
Lemonsoft toiminnanohjausjärjestelmän käyttöönotto-opas
Perinteisesti testaus- ja tarkastusprosessit noudattavat V-mallia. Koska ketterät menetelmät tuovat muutoksia prosessiin, keskityin tarkastelemaan niiden ominaisuuksia. Komponentin testaus on hyvä esimerkki siitä, että testausprosessia kannattaa suunnitella etukäteen. Siksi kohdensin tutkimukseni nimenomaan komponenttien testaukseen. Raportin tarkoitus on nostaa esiin asioita, joita pitää käsitellä ja ratkaista, kun suunnitellaan testausta ja testauksen automatisointia. Tutkin sitä, miten saadaan aikaan onnistunut testaus. Tutkimusmetodina on laadullinen tutkimus. Hain tietoa analyysini pohjaksi kirjallisuudesta, seminaareista, testausseminaareista ja haastattelemalla asiantuntijoita. Jotta raportti ei olisi paisunut liian laajaksi, jätin tarkastelun ulkopuolelle tietoturva- ja suorituskykytestauksen. Onnistunutta testausta lähestyin muun muassa pureutumalla projektien epäonnistumisen syihin sekä poimimalla esimerkkejä onnistuneista projekteista.  Johtopäätökset: Ketteriä menetelmiä käyttävä projekti keskittyy tuottamaan liiketoiminnan arvonlisäystä (business value). Ketteriä menetelmiä käyttävä tiimi kehittää ohjelmaa ominaisuus kerrallaan. Näin ei tuhlata resursseja turhien toimintojen kehittämiseen ja muutoksiin voidaan vastata nopeasti. Tarkastelun perusteella kypsyystasoltaan korkealla tasolla oleva tiimi pystyy vastaamaan muutoksiin nopeasti, siksi tutkitaan prosessin kypsyysmallia (CMMI). CMMI mallin mukaan kypsyys on organisaation mittari, mutta myös tiimin voi hyödyntää mallia kypsyystasonsa kehittämisessä.   Ketteriä menetelmiä käyttämällä testaukseen voidaan saada nopeutta ja joustavuutta. Ketterät menetelmät korostavat ohjelman laatua ja automatisointia. Onnistuneen testauksen näkökulmasta tärkeää on toimiva kehitys- ja testausympäristö. Kehitysympäristön pitää sallia automatisoitujen testien kehittäminen, ajaminen ja myös käsin tehtävä testaus. Keskeistä on pystyä tekemään nopea muutos tuotannossa. Ketterä ohjelmistokehitys voi käyttää testivetoista ohjelmistokehitysmallia. Automaatio on avain menestyksekkääseen ketterillä menetelmillä tehtävään ohjelmistokehitykseen. Kehitystyö on hyvä aloittaa pilottiprojektilla ja kehittää kestäviä testejä. Yksikkötason testien rinnalle pitää rakentaa myös toimiva aloitustestijoukko (Intake Test). On myös hyvä huomioida, että tarvitsemme erilaisia testejä eri testitasoilla.
CakePHP-ohjelmointikehyksen käyttö verkkosovelluskehityksessä
Ketterien menetelmien hyödyntäminen videopelien julkaisun jälkeisessä ylläpitoprosessissa
Terveydenhuolto ja kuntoutus on tällä hetkellä yksi tärkeistä painopisteistä mobiilisovellusten sekä kuluttajille suunnattujen teknisten laitteiden kehityksessä. Niin sanottu mHealth eli terveydenhuoltoa sivuavat mobiilisovellukset ovat niin Tampereella kuin muuallakin maailmassa kiinnostuksen kohteena sekä kasvuyritysten että erilaisten asiantuntijaorganisaatioiden parissa.    Tämän opinnäytetyön tavoitteena on tarkastella, kuinka kuntoutusaiheisen mobiilisovelluksen voi toteuttaa pelimoottorina tunnetussa Unity-kehitysympäristössä. Työssä esitellään niitä teknisiä menetelmiä, joita sovelluksen toteutukseen on käytetty, mutta tarkastellaan myös haasteita, joita Unityn käyttöön liittyy.    Raportin johdannossa pyritään kertomaan tyhjentävästi, minkälaisista lähtökohdista sovellusta on lähdetty rakentamaan. Teoreettinen osuus keskittyy kehitysympäristön valintaan ja Unity-ohjelmointiin yleisellä tasolla. Tämän jälkeen esitellään muutamia teknisiä menetelmiä sekä lopuksi arviointia itse sovelluksen ja tämän raportin onnistuneisuudesta.    Opinnäytetyön varsinainen tarkoitus ja konkreettinen lopputulos on fysioterapeuteille ja heidän asiakkailleen suunnattu mobiilisovellus, joka on edennyt kevään ja kesän 2014 aikana pilottivaiheeseen. Ensimmäiset koekäyttäjät ovatkin saaneet jo sovelluksen käsiinsä. Sovelluksen ympärille on perustettu myös Kineso Oy -niminen yritys, jossa kehitystyö jatkuu tämän opinnäytteen jälkeenkin. Asiasanat: fysioterapia, mHealth, unity, pelimoottori, ohjelmistokehitys.
TM500-testiohjelmisto
Projektinhallinta : Case oldtimerTimer
Testauslähtöinen ohjelmistokehitys
OMD Explorer ohjelmisto ABB OMD800-laitteelle
Vertaava esitys ohjelmistokehityksestä projektina ja prosessina : Case: Nurseus-hoitosuunnitelmajärjestelmä
Tämä opinnäytetyö toteutettiin toimeksiannon kautta yhteistyössä oululaisen HappyWise Oy:n kanssa. Tutkimuksen aiheena oli ohjelmistotuotteen kehittäminen ja kohdeohjelmistona HappyWise Trainer niminen e-oppimisympäristö. Toimeksiannon tarkoituksena oli kerätä tietoa tuotteesta, jotta sitä voidaan kehittää eteenpäin ja sen markkinointia voidaan parantaa. Opinnäytetyö koostuu teoreettisesta osuudesta sekä pääosin puhelimitse toteutetuista teemahaastatteluista. Teoriaosuudessa käydään läpi ohjelmistotuotteen hallinnan runko, jonka pohjalta luodaan käsitys ohjelmistotuotteen kehittämiseen vaikuttavista tekijöistä. Ohjelmistotuotteen hallinta on ohjelmistoyrityksille erittäin tärkeää kilpailukyvyn kannalta. Empiirisessä osiossa käydään läpi teemahaastatteluiden toteutus. Puhelinhaastatteluja varten laadittiin kysymykset valmiiksi ja haastattelut toteutettiin jokaisen haastateltavan itse ehdottamana ajankohtana. Yksi haastattelu suoritettiin sähköpostitse lomakehaastatteluna. Haastatteluissa selvisi, että HappyWise Trainerin ominaisuudet ovat pääsääntöisesti riittävät, eikä niiden lisäämiselle ole välttämätöntä tarvetta. Käytettävyydessä kuitenkin voisi olla parantamisen varaa. Haastateltavat yritykset toimivat eri toimialoilla, joten vastaukset erosivat toisistaan. Joissain yrityksissä e-oppimisympäristöllä halutaan hoitaa vain henkilöstön koulutus ja perehdytys, kun taas joissain yrityksissä monipuolisemmat toiminnot olisivat tervetulleita. Haastatteluista saadun tiedon perusteella HappyWise voi löytää apua Trainer e-oppimisympäristön kehitykseen ja markkinointiin. Tutkimus on tehty pelkästään HappyWisen olemassa oleville Trainer-asiakkaille, joiden määrä on tällä hetkellä vähäinen. Tätä tutkimusta olisi voitu syventää haastattelemalla muitakin, kuin pelkästään Trainer-asiakkaita. ^
Unity iPad-pelikehityksessä
Opinnäytetyön tavoitteena oli selvittää, miten ketterät menetelmät sopivat sisällöntuotantotyöhön. Tutkimusmenetelmänä käytettiin tapaustutkimusta. Teemahaastattelujen ja havainnoinnin avulla selvitettiin tutkimuksen kohdeorganisaatiossa sisältötiimin ja tuoteomistajien kokemuksia ketteristä menetelmistä ja uuden menetelmän käyttöönotosta. Kirjallisuusosuudessa esitellään ketterien menetelmien periaatteita ja tunnetuimpia kehitysmenetelmiä ja toimintamalleja, kuten scrum, XP, Kanban ja lean-toimintamalli. Lisäksi kirjallisuusosiossa käydään lyhyesti läpi, millaista on hyvä verkkosisältö. Haastattelujen ja havainnoinnin tuloksena selvisi, että ketterät menetelmät soveltuvat ohjelmistokehityksen lisäksi myös esimerkiksi sisältötyöhön. Vaikka haastatteluissa nousi esille myös työmenetelmään liittyviä haasteita, ketterät menetelmät koettiin kaiken kaikkiaan positiivisena. Suurimpia hyötyjä olivat läpinäkyvyyden ja yhteistyön lisääntyminen. Myös ketterien menetelmien käytäntöjen myötä työmäärän hallittavuus ja kasvokkainviestintä paranivat. Suurimmat haasteet liittyivät töiden priorisointiin. Myös ketteriin menetelmiin liittyvät käytännöt koettiin välillä epäkäytännölliseksi toistuvien ja pienten tehtävien hallinnassa. Haastatteluissa nousi myös esille kehitysehdotuksia työprosessin kehittämiseksi.
Raporttien kehittäminen ketterässä ylläpitoprosessissa
Scrumin käyttö pienryhmien ohjelmistokehityksessä
Windows-kaupan sovelluksen kehittäminen : case: The Tournament God
Viestintä, sen haasteet ja niihin vastaaminen kansainvälisesti hajautetussa ketterässä ohjelmistokehityksessä
Ketterää kehitystä
Innovaatioprosessi mobiilisovelluskehityksessä
Johtaja avainasemassa : dialoginen johtajuus ohjelmistokehittämisen organisaatiossa
Videoiden järjestely .Net-sovelluskehyksellä
Citynomadi Oy:n ohjelmistotestauksen kehittäminen
Pelillisyyden hyödyntäminen matkailumarkkinoinnissa ja sitä tukevat kehitysmenetelmät ja tietovarannot : loppuraportti
Jatkuva integrointi Qt-ympäristössä
ICT-omaisuudenhallintajärjestelmän toteutus
Skaalautuvan tietokannan suunnittelu ja toteutus hankintailmoitusportaaliin
Vaatimusmäärittely ketterässä ohjelmistokehityksessä
Web Services -palvelujen luonti JAX-WS-tekniikalla
Tekla Structures -liitoksen kehittäminen
Web-sovelluskehitys Vaadin-sovelluskehyksellä
Laadunvarmistus monen toimittajan ohjelmistoprojektissa
PHP-sovelluksen refaktorointiohje
Tiivistelmä:  Insinöörityössä esitellään testauslähtöisen ohjelmistokehityksen vaiheet  ja miten ne toimivat yhdessä.  Teoriaosuudessa käydään ensin läpi perinteinen V-mallin ohjelmistokehitys ja miten siinä ohjelmistotestaus on toteutettu. Testauslähtöisen ohjelmistokehityksen osiossa esitellään lyhyesti, miten käyttäjien haluamat ominaisuudet muutetaan käyttäjätarinoiksi, ja tarinat edelleen testeiksi.  Esimerkkiprojektissa tehdään ohjelma, joka hakee säätietoja verkkopalvelusta, muokkaa niitä ja tallentaa ne tietokantaan. Projektissa käytetään  teoriaosuudessa esiteltyjä asioita ja miten niitä sovelletaan käytännössä.  Projektin aluksi tehdään käyttäjätarina, joka muutetaan hyväksymistestiksi koko ohjelmalle. Lopuissa luvuissa esitellään, miten ohjelma rakennetaan paloissa kirjoittaen testit ensin.
Työssä muokataan Vertex BD:n ominaisuuksia helpottamaan sekä nopeuttamaan elementtisuunnittelua. Tavoitteena on automatisoida mahdollisimman paljon suunnittelua ohjelman avulla ajan säästämisen lisäksi myös virheiden välttämiseksi. Työ on toteutettu käytössä olleiden ohjeiden ja Vertex Systemsin kanssa pidettyjen palaverien pohjalta, mutta enimmäkseen kokeilemalla ja tutkimalla. Raportissa on esitetty kuhunkin kehitysalueeseen löydetty muokkaustapa. Työn lopputuloksena saatiin hyvin toimiva ohjelma, joka tuottaa automatisoidusti suurimman osan elementtien osista. Saatuja tuotoksia kokeiltiin useaan suunnittelukohteeseen, ja ne toimivat erinomaisesti.
Tämä opinnäytetyö oli toimintatutkimus Turun ammattikorkeakoulun ja yliopiston yhteisen pelilaboratorion, Turku Game Tech & Arts Lab (GTAL), kehitystyöstä. Opinnäytetyössä pohdittiin GTAL-hankeen vaikutuksia ja tuloksia. Työssä käsiteltiin myös Turun ammattikorkeakoulun tietotekniikan koulutusohjelman peliteknologian suuntautumisvaihtoehdon suunnittelutyötä sekä sitä, millaisia opintojaksoja peliteknologian insinööriksi opiskeleva voi suorittaa. GTAL-hanke oli Teknologiateollisuuden 100-vuotissäätiön rahoittama hanke vuosille 2009-2011. Se oli toiminnan kehittämisprojekti, jonka tavoitteina olivat Turun ammattikorkeakoulun ja Turun yliopiston pelialan koulutusyhteistyön kehittäminen ja laajentaminen, yhteisen toimintamallin luominen korkeakoulujen pelialan koulutus- ja kehittämisyhteistyölle. Lisäksi tavoitteena oli tehdä pelialan tutkimusta, yritysvierailuja sekä osallistua pelialan tapahtumiin kotimaassa ja ulkomailla. Konkreettisina vaikutuksina voidaan pitää kehittäjäyhteisön syntymistä Turkuun ja syksyllä 2012 alkava pelialan tutkintoon johtavaa koulutusta sekä Turun ammattikorkeakoulussa että Turun yliopistossa.
Vertaava esitys ohjelmistokehityksestä projektina ja prosessina : case: Nurseus-hoitosuunnitelmajärjestelmä
Yrityksen tuotekehitysprosessien kehittäminen
Kunnallisen etäkokouksen testitapaukset
Testaus ja perinteinen sekä ketterä ohjelmistokehitys
Turvallisuus- ja pelastusviranomaisten ICTjärjestelmien kehittäminen ja integraatio
Ohjelmiston käytettävyystestaus : käyttäjäkeskeinen kehitysprosessi
Onnistunut testaus ja ketterät menetelmät
Ketterien projektinhallintatyökalujen vertailu
Pienoisohjelman rajapintojen kääntäminen toiselle pienoisohjelma-alustalle
Suorituskykytestityökalun graafinen käyttöliittymä
Jatkuva integrointi : Java-ohjelmistotuotteelle
Jatkuvan integraation käyttöönotto ohjelmistokehityksessä
Kokemuksia ketterien menetelmien käytöstä sisällöntuotannossa
Esavisa-mobiilipeli
Ohjelmistoprojektin anlyysi ketterien menetelmien kannalta. Case StarSoft Oy
Lokaatiopohjainen karttasovellusalusta : Suunnittelu ja toteutus
Subversion-versionhallintaohjelmaan siirtymisen haasteet ohjelmistokehityksessä
Riippuvuusinjektio : Joustavuutta arkkitehtuuriin löyhillä sidoksilla
WWW-sovelluksen toteutus MVC-arkkitehtuurilla
Kuntoutusaiheisen mobiilisovelluksen toteutus Unityssä
UPS suunnittelu ja mitoitus : UPS-laskentaohjelma
Vesiputousmallista scrumiin
Ohjelmistoprojektien laadulliset haasteet : Tapausesimerkkejä Yritys X:n ohjelmistoprojekteista
Ketterien kehitysmenetelmien käyttö keskuskoneympäristössä
Ohjelmistotuotannon prosessit ja menetelmät
Suunnitteluprojektin hallinta ja vaiheistus : Sovellusprojektin suunnittelumenetelmät ja niiden käytettävyys
Yrityksen tuotekehitysprosessin määrittely ja käyttöönotto
Tikettijärjestelmän prototyypin kehitys Grails-sovelluskehyksellä
Palohälytys-ohjelmistolaajennus EIRIS-alustaan
Scrumin soveltuvuus sovelllushallintaan
Agile-menetelmät : Case: ICT-alan yritys
Ketterät menetelmät peliteollisuudessa : suomalaisia pelistudioita koskeva kyselytutkimus
Tiivistelmä: Pienoisohjelman rajapintojen kääntäminen toiselle pienoisohjelma-alustalle. Pienoisohjelmat (engl. widget) on suunniteltu suorittamaan yhtä tehtävää. Tehtävät voivat olla hyödyllisiä, kuten uusimpien uutisten hakemista, tai viihteellisiä, kuten pelejä. Niiden tärkeimmät ominaisuudet ovat pienikokoisuus ja siirreltävyys, jotka mahdollistavat pienoisohjelmien käytön esimerkiksi tietokoneen työpöydällä tai matkapuhelimessa. Pienoisohjelmat käyttävät yleisiä www-teknologioita, jolloin kuka tahansa, joka osaa tehdä Internet-sivuja, osaa myös tehdä mobiilisovelluksia. Insinöörityön tavoitteena oli kehittää menetelmä, jolla pienoisohjelmaa voitaisiin käyttää toisella pienoisohjelma-alustalla. Standardoitua tapaa kehittää pienoisohjelmia ei ole, joten eri teknologioita ja rajapintoja käyttäviä laitteita ja pienoisohjelmia on useita. Insinöörityön avulla pyrittiin parantamaan yhteensopivuutta kahden eri pienoisohjelma-alustan välillä. Menetelmänä päädyttiin käyttämään JavaScript-käärekirjastoa, jolla luotiin alkuperäisen pienoisohjelma-alustan objekteja ja -metodeita vastaava rakenne kohdealustan toiminnallisuudella. Työn tuloksena syntyi JavaScript-käärekirjasto, esimerkkisovellukset, dokumentaatiot ja automatisoitu alustustiedostojen kääntäjä. Käärekirjasto sisälsi kaksi käännettyä rajapintaa, ja se julkaistiin avoimena lähdekoodina, jota muut pienoisohjelmien kehittäjät voisivat tulevaisuudessa laajentaa. Esimerkkisovellukset kattoivat kaksi alkuperäisen pienoisohjelma-alustan rajapintoja käyttävää pienoisohjelmaa ja yhden perinteistä JavaScriptiä käyttävän pienoisohjelman. Dokumentaatiot sisälsivät yksityiskohtaiset   ohjeet pienoisohjelman kääntämiseen ja yleiset ohjeet käärekirjaston laajentamiseen. Alustustiedostojen kääntäjä nopeutti pienoisohjelmien kääntämisprosessia entisestään automatisoimalla alustustiedostojen muunnokset useiden pienoisohjelma-alustojen alustustiedostojen kesken. Kääntämättömiä rajapintoja on jäljellä useita. Työn tuloksena syntynyttä käärekirjastoa voisi tulevaisuudessa laajentaa kattamaan muita rajapintoja ja mahdollisesti jopa muidenkin ympäristöjen rajapintoja. Käärekirjastosta voisi olla apua, kunnes mobiiliteollisuuden tahot sopivat yhteisestä standardista, joilla pienoisohjelmia kehitetään.
Xamarin Studion ja PhoneGapin soveltuvuus Rimeforgen käyttöön
Kaivusyvyysjärjestelmän ohjelmistokehitys
OGRE 3D -grafiikkamoottori Qt-ympäristössä
Lääkinnällisen laitteen ohjelmistokehitys täydennetyllä Scrum-mallilla
Doctrine 2 ja Zend Framework 2 sovelluksen jatkokehityksen välineinä : case: matkalaskujärjestelmä
Behaviour-driven development mobiiliohjelmistojen kehityksen tukena
Elektronisen kauppapaikan rakentaminen
Tiivistelmä: Käytettävyys inkrementaalisessa ohjelmistosuunnittelussa - menetelmänä käyttötapaus (1 s.).
Javan soveltuvuus DSiP-reititysjärjestelmän asetusmuokkaimen luontiin
Testaamisen kehittäminen yrityksen ohjelmistokehityksessä
Sovellusvirtualisoinnin mahdollisuudet ja hyödyntäminen Satakunnan ammattikorkeakoulussa : case: Liiketoiminta ja kulttuuri Pori
AV-kioskin varausjärjestelmän vaatimusmäärittely
Mittausohjelmiston testausmenetelmien kehitys
Puunhankinnan karttasovellus
PhoneGap-ohjelmistokehyksen hyödyntäminen alustariippumattomassa mobiilisovelluskehityksessa
Stalkermusic CGI applikaatio Naya 2.0.0
Kemikaalitietokannan hallinto-ohjelmiston suunnittelu ja toteutus
KuAvo 2.0 järjestelmätestaus
Mikrotukipalvelun huoltotietokanta
Mobiilisovelluksen kehitysprojekti : RecoApp Oy
Ohjelmiston muutos yrityksessä: Case HS-Vesi
Tiedonhallinta ja raportointi Sharepoint  Server 2007 -ympäristössä
Automatisoitu testaus Drupal 7:n moduulien kehittämisessä
Qt-sovelluksen kehittäminen Symbian-alustalle
Automaattinen ovikello
Tiivistelmä: Insinöörityön tavoitteena oli selvittää riippuvuusinjektion periaate, antaa esimerkkejä sen hyödyntämisestä sekä esitellä toteuttamisen avuksi vapaasti saatavilla olevia kolmannen osapuolen ohjelmistokehyksiä. Työ toteutettiin tutkimalla aiheeseen liittyvää kirjallisuutta ja toteuttamalla esimerkkisovellus, jossa ratkaistiin riippuvuuksista johtuva testattavuuden ongelma riippuvuusinjektiota käyttäen. Työn motivaationa oli testattavuuden parantaminen. Riippuvuusinjektion periaatetta käsiteltiin yleisesti hyväksi todettujen sovelluskehitysten suunnitteluperiaatteiden kautta. Esitellyt suunnitteluperiaatteet olivat SOLID-akronyymin mukaiset avoin-suljettu-periaate, yhden vastuualueen periaate, Liskovin korvaavuusperiaate, rajapintojen erotteluperiaate ja riippuvuuden kääntöperiaate. Todettiin, että näiden periaatteiden noudattaminen tarkoittaa löyhien liitosten suosimista ja riippuvuusinjektion avulla mahdollistetaan löyhät liitokset.  Riippuvuusinjektion hyödyistä esiteltiin testattavuus, myöhäinen sidonta, laajennettavuus, ylläpidettävyys ja yhtäaikainen kehitys. Näistä esimerkkisovelluksen avulla havainnollistettiin testattavuutta. Toteutustavoista käytiin läpi alustaja-, setteri- ja metodi-injektio sekä ympäröivän kontekstin käsite.    Riippuvuusinjektion toteuttamisella oli huomattava merkitys testattavuuden parantumiseen. Tämän lisäksi esimerkkisovelluksen arkkitehtuuri parani noudattamaan vahvemmin olio-ohjelmoinnille ominaista kapselointia. Esimerkkisovellukseen ei käytetty kolmannen osapuolen ohjelmistokehyksiä, koska niillä ei saatu riittävää lisähyötyä.
Asiakashallinta-sovellus Elysium Solutions Oy:lle
Blogi-lisäosan kehittäminen Ramses CMS -järjestelmään
Android-sovelluskehitys
Tietojohtaminen ketterässä ohjelmistokehityksessä (scrum) : case Samlink
Käytännön ketterät menetelmät laaja-alaisessa ohjelmistokehityksessä
Tämän opinnäytetyön tarkoituksena on tehostaa ohjelmistojen kehittämistä, kun FogBugz-järjestelmää käytetään kehittämisen tukena. FogBugz on järjestelmä, johon asiakkaan edustajat voivat lisätä virheraportteja ja uusien ominaisuuksien määrittelyitä liittyen kehityksen alla olevaan ohjelmistoon. Tällainen tieto on tavallisesti arkaluontoista, eikä sitä voi lähettää salaamattomana verkon yli. FogBugz-järjestelmä ei tarjoa oletuksena tarvittavaa toiminnallisuutta, mutta tarjoaa työkalut sellaisen lisäämiseen. Kyseinen ominaisuus voidaan lisätä laajennusosan muodossa. Tässä opinnäytetyössä tehdään EmailNotificationsOpenPGP niminen laajennusosa. Tämä laajennusosa toteuttaa OpenPGP Message Format (RFC4880 standard) mukaisen salauksen ja käyttää sitä ilmoituksiin, joita tullaan lähettämään automaattisesti. Nämä ilmoitukset lähetetään myös tämän laajennusosan toimesta aina, kun jotain tapahtuu (uusi virheilmoitus lisätään, uutta toiminnallisuutta määritellään, jotain olemassa olevaa ilmoitusta muokataan jne.). Ilmoituksia ei lähetetä kaikille, vaan ainoastaan niille, jotka ovat potentiaalisesti muutoksesta kiinnostuneita.  Tehty laajennusosa on pääasiassa automatisoitu. Ainoastaan käyttöönottovaiheessa tarvitsee säätää sähköpostipalvelimen tiedot kuntoon ja lisäksi ylläpitää käyttäjien julkisten avainten (hyödynnetään salauksessa) listaa. Tämä hoidetaan järjestelmän ylläpitäjien toimesta, joten tavallinen käyttäjä ei huomaa järjestelmässä mitään muutosta.
Testausarkkitehtuuri Osuuspankkikeskuksessa
Vertex BD-ohjelmiston käyttöönotto ja sovittaminen elementtisuunnitteluun
OHJELMISTOTESTAUS : Opas ohjelmistokehittäjille
Grafiikkamoottorin pohja-arkkitehtuurin suunnittelu ja toteutus
Game tech & arts lab : korkeakoulujen yhteisen pelilaboratorion kehitystyö
Lean-ohjelmistokehityksen käyttöönoton jälkeisiä ohjelmistokehitysnopeutta rajoittavia tekijöitä
Ohjelmistotestaus siirryttäessä perinteisistä ohjelmistokehitysmenetelmistä Scrumiin
Cafe Digno Kahvireseptisovellus iPhonelle ja iPadille
Reaaliaikaisen moninpelipalvelimen toteutus Node.js:llä
Tulevaisuudessa tutkimus voitaisiin toteuttaa esimerkiksi potentiaalisille asiakkaille.
Extreme Programming (XP) -metodologian soveltaminen ohjelmistojen tuotantoon
Kuvausjärjestelmä
Dokumenttienhallintajärjestelmän tuotteistaminen tietyille kohderyhmille
Tämän opinnäytetyön tarkoitus on kehittää Helsingin kaupungin opetusviraston tietohallintopalveluiden tilausten hallintaa. Opinnäytetyöprosessin alle perustettiin Tihake-projekti, joka sai tehtäväkseen tuottaa tilausten seurantaan soveltuvan Tise-järjestelmän määrityksen. Lisäksi Tihake-projektin tehtäviin kuuluivat Tise-järjestelmän vaatimusten määritys sekä testauksen suunnittelu. Aihevalinta sai alkunsa tietohallintopalveluiden tarpeesta kehittää tilausten seuranta vastaamaan kasvaneita laitetoimituksia. Tise-järjestelmän yksi tärkeimmistä tehtävistä on parantaa tiedonkulkua tilaajien ja vastaanottajien välillä, jolloin laitteiden jatkotoimituksia pystytään tehostamaan. Tihake-projektin vaihejako toteutettiin vesiputousmallia soveltaen. Projekti piti sisällään kolme päävaihetta, jotka käsittivät vaatimusten kartoituksen, atk-järjestelmän määrityksen sekä testauksen suunnittelun. Jokainen vaiheen tehtävänä oli tuottaa vaiheeseen liittyvä dokumentaatio. Määrityksen käyttötapausten kuvauskielenä käytettiin UML-standardin mukaista kuvauskieltä. Lisäksi dokumentoinnissa sovellettiin HAAGA-HELIA ammattikorkeakoulun käyttämiä kuvaustapoja. Tihake-projektin tuloksena syntyivät Tise-järjestelmän vaatimusmääritys, atk-järjestelmän määrityskuvasto sekä testaussuunnitelma. Tulokset muodostavat yhdessä selkeän kokonaisuuden, jonka pohjalta tietohallintopalvelut voivat edetä Tise-järjestelmän suunnittelu ja toteutusvaiheeseen.
Tilanvarausjärjestelmän ja opintojaksosuunnittelun kehittäminen
Ohjelmistokehyksen käyttö web-ohjelmoinnissa - Case listaa.fi
Tiivistelmä: Interaktiivisten palveluiden kehittäminen MediaPC:lle.
Aikataulutekijät Flow Diet Ravintolaskenta -ohjelmiston toteutuksessa
Tise-tilaustenseurantajärjestelmän vaatimukset, määritys sekä testauksen suunnittelu
Laadunvarmistus sähköverkkoyhtiön tietojärjestelmäprojektissa
Ulkoistetun testausprojektin prosessi
SCM prosessien käyttöönotto
Agile-menetelmien soveltaminen sulautettujen järjestelmien laitteistokehitykseen
Interaktiivisten palveluiden kehittäminen MediaPC:lle
Reseptihallintaohjelma
Työmäärän arviointi ketterässä ohjelmistokehityksessä : haastattelututkimus
Dynaamisen ohjelmistotestauksen automatisointi: Windows-sovelluksen testaus ja TestPartner-ohjelma
Hankesuunnittelu moniaistiseen markkinointiviestintään Case: Shanghain maailmannäyttely
Käytettävyys ohjelmistokehityksessä
Sähköisten allekirjoitusten arkistointisovellus
@Oppimaa-ympäristö
Verkkopalvelun jatkokehittäminen Ruby on Rails -ohjelmistokehyksellä
Silverlight-teknologia ohjelmistokehityksessä Case: Ryhti(tm)
Työnseuranta- ja tiedotusjärjestelmä ketterästi
WordPress-lisäosan kehitys : Prinetti-integraatio WooCommerce-verkkokauppaan
Sovellusaluekeskeinen ohjelmistokehitys ja visuaalinen sovellusaluekieli rahaston arvonlaskentaprosessin mallintamiseksi
Työmääräarvioinnin ja aikatauluttamisen merkitys ohjelmistoprojektissa
Menetelmiä portlettipohjaisen verkkosovelluksen kehittämiseen
Mobiiliohjelman toteuttaminen Agile-menetelmin
Ketterä ohjelmistonkehitys Scrum-menetelmää käyttäen - kohti todellista ketteryyttä : tutkimustapaus osittain ketteristä projekteista
Kehitys- ja integrointiympäristön kehittäminen
Improvisointi ohjelmistokehityksen työvälineenä
Tiivistelmä: Tässä insinöörityössä kerrotaan Telepulssi Oy:ssä suunnitellusta ja toteutetusta Palohälytys-ohjelmistolaajennuksesta Visonic Technologies ltd:n EIRIS-ohjelmistoon.  Ohjelmiston tarkoituksena on välittää palokeskusten hälytysviestit EIRIS-ohjelmiston avulla rakennuksissa oleviin käytävänäyttöihin. Hälytystilanteessa käytävänäyttöihin ilmestyy tulipalon sijaintiin liittyvää tietoa. Palohälytyskeskuksena toimii Ab Hedengren oy:n Prodexpaloilmoitinkeskus. Uusien paloturvallisuusmääräysten myötä oli Meilahden yhteispäivystyssairaalaan vaadittu lisättävän paloturvallisuutta. Lisätystä turvallisuudesta oli useita eri vaihtoehtoja. Vaihtoehtoina oli muun muassa koko talon kattava sprinklerijärjestelmä tai tarkennettu palohälytystieto rakennuksen henkilökunnalle ja sen asiakkaille. Silloiselta työnantajaltani Telepulssi Oy:ltä pyydettiin vaihtoehtoista ratkaisua tarkennettuun palohälytystietojärjestelmään.  EIRIS-ohjelmisto on hyvin monipuolinen työkalu yritysten turvajärjestelmien keskeiseen hallintaan. Ohjelmiston tarkoituksena on liittää kaikki yrityksen turvajärjestelmät yhden käyttöliittymän alle. Insinöörityössä kehitetyllä Palohälytys-ohjelmistolla on tarkoitus liittää Prodex-merkkiset palohälytyskeskukset EIRIS-ohjelmistoon. Ohjelmisto mahdollistaa saapuvien palohälytysten edelleen välityksen loppukäyttäjille eri metodein. Palohälytysohjelmistolaajennuksen kehityksessä päädyttiin käyttämään prototyyppi -ohjelmointimallia. Ohjelmointimalli mahdollisti EIRIS-ohjelmistolaajennuksen nopean kehitystyön. Prototyyppi-ohjelmointimallin ansiosta ohjelmistolaajennuksessa suunniteltujen toiminnallisuuksien lopputulokset oli mahdollista nähdä heti. Ennen Palohälytysohjelmistolaajennuksen lopullista versiota piti useat toiminnallisuudet suunnitella ja rakentaa uudelleen. Insinöörityössä saatiin aikaiseksi kaksi EIRIS-objektia: Palokeskus-objekti ja Ryhmienhallinta-objekti. Nämä aikaan saadut objektit mahdollistivat Prodex-palokeskusten liittämisen EIRIS-ohjelmistoon.
Opinnäytetyön tavoitteena oli löytää avoimen lähdekoodin projektinhallintaohjelmisto Pohjois-Karjalan ammattikorkeakoulun opiskelijoiden käyttöön. Opinnäytetyön toisena tavoitteena oli löytää projektinhallintamenetelmä käytettäväksi opiskelijoiden ohjelmistoprojekteissa. Projektinhallintamenetelmänä päädyttiin käyttämään Scrum-mallia. Opinnäytetyössä on kuvattu Scrum-malli ja siihen liittyvät prosessit. Opinnäytetyössä tutkitaan lisäksi avoimen lähdekoodin tuomia mahdollisuuksia ja liiketoimintamalleja sekä tarkastellaan erilaisia lisenssejä. Opinnäytetyö tehtiin yhteistyössä toisen ohjelmistotekniikan opiskelijan Olli Alangon kanssa, hän käsitteli projektinhallintaohjelmistoja käytettävyyden näkökulmasta. Tässä työssä keskitytään ohjelmistoihin projektinhallinnan näkökulmasta. Opinnäytetyössä on esitelty projektinhallintaohjelmistojen tarjoamat työkalut ja ominaisuudet ketterään ohjelmistokehitykseen. Erityistarkasteluun otettiin Redmine-projektinhallinsovellus. Opinnäytetyön tuloksena oli, että ketterien menetelmien hyödyntäminen parantaa ohjelmistokehitysprosessien laatua monin tavoin. Scrum-malli ja Redmine-projektinhallintasovellus voidaan ottaa käyttöön tulevaisuudessa käytännössä Pohjois-Karjalan ammattikorkeakoulun ohjelmistoprojektikursseilla.
CADS Planner -ohjelmiston käyttöönotto rakennesuunnittelutoimistossa
Ketterästi Valtion IT-palvelukeskuksessa
Työssä tutkitaan Android-sovelluskehitystä tekemällä kirjallisuustutkimus ja toteuttamalla testisovellus. Työssä selvitetään kuinka sovelluksia kehitetään Android-alustalle, kuinka Android-sovelluskehitys eroaa normaalista sovelluskehityksestä ja kuinka sovellus julkaistaan Play-kaupassa. Teoriatausta osuudessa tutkitaan Androidin historiaa lyhyesti ja tarkastellaan Android-käyttöjärjestelmän ja Androi-sovellusten arkkitehtuuria. Teoriataustassa käsitellään myös sitä, millä ohjelmointikielillä Androidille voi kehittää sovelluksia ja mitä työkaluja näillä kielillä ohjelmointiin on olemassa. Teoriatausta ja kirjallisuustutkimus osoittavat että Java on Android-ohjelmointikielenä tuetuin ja kenties myös suosituin. Ohjelmointi Android-alustalle onnistuu myös C++- ja HTML5-ohjelmointikieliä käyttäen, mutta kuten teoriataustasta käy ilmi niiden tuki ja toimivuus vaihtelevat. Teoriataustassa läpikäyty sovelluksen rakenne todettiin päteväksi testisovelluksen lähdekoodia tutkimalla. Sovellus koostui XML-kuvauksesta, resurssitiedostoista ja Java-luokista. Sovelluksen julkaisemisesta voidaan sanoa teoriataustan ja kirjallisuustutkimuksen perusteella, että mikäli kehitetty sovellus tarjoaa jotain arvoa käyttäjälle esim. viihde- tai hyötyarvoa sen julkaisemista voidaan harkita Play-kaupassa. Play-kaupassa sovelluksen julkaiseminen koostuu Play-kauppaan rekisteröinnistä, sertifikaatin luonnista, apk-paketin luonnista. Android-sovelluskehitys ei eroa suuresti perinteisestä sovelluskehityksestä. Erot syntyvät sovellusten julkaisutavoista ja hieman erilaisista Java-kirjastoista. Tutkimuksen tuloksia voi käyttää esimerkiksi Android-sovelluskehitystä aloittelevat ohjelmistokehittäjät tarjoamaan kattavan kuvauksen Android-alustasta, sekä pohjana sovelluskehityksen opettelulle. Suositeltavaa olisi tutkia tarkemmin kehitysvaiheessa olevia kehitysympäristöjä kuten Googlen Android Studiota, kunhan ne valmistuvat. Tämän lisäksi HTML5:n kehittyessä ja mobiiliselainten alkaessa tukea paremmin HTML5:ttä jatkotoimenpiteinä voidaan suositella tarkempaa tarkastelua sovellusten kehittämistä Androidille HTML5:llä.
Riippuvuusinjektio : joustavuutta arkkitehtuuriin löyhillä sidoksilla
Komponentin toteutus Flow Diet ravintolaskenta -ohjelmistoon
SAPin testausprosessin kehittäminen : ALMin käyttöönotto testauksen apuvälineeksi ABB:llä
Laadunvarmistusprosessin kehittäminen kaupankäyntiohjelmistojen kehityshankkeissa
Windows-tekniikoiden soveltaminen usean alustan tuotekehityksessä
Pilvipalvelujen hyödyntäminen ohjelmistotestauksessa
Linux-ohjelmistokehitys AVR32-ympäristössä
Tiivistelmä: PhoneGap-ohjelmistokehyksen hyödyntäminen alustariippumattomassa mobiilisovelluskehityksessä. Insinöörityössä selvitettiin PhoneGap-ohjelmistokehyksen hyödyntämistä alustariippumattomassa mobiilisovelluskehityksessä ja sitä, millaisia haasteita sen käyttöönotto luo sovelluskehittäjälle. Insinöörityö toteutettiin Suomen Punaisen Ristin Veripalvelulle. Insinöörityössä käytiin läpi PhoneGapin arkkitehtuuri, jonka käyttöliittymäkerroksena toimii WebKit-komponentti. WebKit-komponenttia ohjaa PhoneGapin JavaScript-moottori, kun taas laitteen natiivitoiminnallisuuksia ja -ominaisuuksia ohjaa PhoneGapin natiivimoottori. Työssä myös tutkittiin PhoneGapin tarjoamat ohjelmointirajapinnat ja se, miten niitä hyödynnetään mobiiliohjelmoinnissa. Insinöörityössä myös selvitettiin, miten PhoneGapiä voidaan laajentaa itsetehtyjen liitännäisien avulla. Työn lopputuloksena syntyi iOS-alustalle toteutettu mobiiliverkkosovellus, jonka avulla sovelluksen käyttäjät saataisiin käymään verenluovutuksessa nykyistä useammin muistuttamalla heitä uudesta verenluovutusmahdollisuudesta. Sovellus toimii käyttäjälle muistutustoiminnallisuuden lisäksi myös informaatiokanavana. Sovellus julkaistaan myöhemmin sovelluskaupassa. Alustariippumattoman toteutuksen ansiosta sovellus voidaan myöhemmin helposti toteuttaa myös usealle eri mobiilialustalle. Kokemukset PhoneGapin hyödyntämisestä sovelluskehityksessä osoittivat sen olevan erityisen hyödyllinen sen mahdollistaman paketoimisen ja natiivisovelluskehitystä huomattavasti loivemman oppimiskäyrän takia.
Tuotehallinnan ja laajuudenhallinnan käytännöt pienessä ohjelmistoyrityksessä : tapaustutkimus
Ohjelmistotuotteen kehitys ja markkinointi : case: HappyWise Oy
Tiivistelmä.
Agilen scrum ja Leanin kanban -menetelmien yhteensopivuus ja eroavaisuus
Sulautetun järjestelmän testiautomatisointi
WWW-sivuston jatkokehitys : case: DynaStart
Käyttäjäkeskeisen suunnittelun hyödyntäminen PhoneGap-mobiilisovelluksen kehitysprosessissa
Konepajan varastonhallintasovelluksen määrittely ja käyttöönotto
Ketterän ohjelmistokehityksen kypsyysmallien vertailu
Viistovalokuvausjärjestelmän käyttöliittymä
