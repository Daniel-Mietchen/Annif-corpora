http://www.yso.fi/onto/yso/p25000 sovelluskehykset
sovelluskehykset sovelluskehykset ohjelmistokehykset
C# : Windows- ja tietokantaohjelmointi
JavaScript : ennen ja nyt
Anroid mobiilikäyttöjärjestelmä
Tiivistelmä: Anygraaf Oy on graafisen alan ohjelmistoja valmistava yritys. Tässä insinöörityössä esitellään Anygraafin mobiilisovelluksen AnyReaderin automatisoidun koonti- ja konfigurointiympäristön toteuttaminen. AnyReader-sovelluksesta tuotetaan asiakkaille räätälöityjä versioita.  Sovelluksen konfiguroinnilla tarkoitetaan sovellusten räätälöintiin ja kääntämiseen vaikuttavien asetusten laittamista paikoilleen ennen varsinaista sovellusten kääntämistä. Tuoteun koontiympäristön tavoitteena oli automatisoida työläs monialustasovelluksen räätälöinti- ja käännösprosessi.  Jenkins CI on jatkuvan integroinnin koontipalvelin, jota Anygraaf käyttää entuudestaan muiden projektiensa koontiin. Toteutettu koontiympäristö on hajautettu useammalle koontipalvelimelle ja se liitettiin osaksi jo olemassa olevaa ympäristöä. AnyReaderin konfigurointiin käytetään Python-ohjelmointikielellä toteutettua Pynt-koontikirjastoa. Valmiit sovellusten asennuspaketit siirretään tiedostopalvelimelle, josta ne julkaistaan Apache HTTP-palvelimen päälle Web.py-ohjelmistokehyksellä toteutetulla Internet-sivustolla. Toteutettua koonti- ja konfigurointiympäristöä käytetään asiakassovellusten koontityökaluna ja se vähentää AnyReaderin päivitysten yhteydessä tehtävää työtä. Tämän insinöörityöraportin lopussa esitellään mahdollisia jatkokehityksideoita koontiympäristön laajentamiseksi.
Opinnäytetyön tavoitteena oli esitellä Python-ohjelmointikielen mikro-ohjelmistokehyksiä, niiden merkitystä web-ohjelmoinnissa ja kartoittaa sovelluskohteita, joihin ne sopivat, vertaamalla niitä tavanomaisiin, suurikokoisempiin ohjelmistokehyksiin. Tarve työlle sai alkunsa aikaisemmasta, henkilökohtaisesta tarpeestani selvittää mikrokehysten soveltuvuutta silloiseen työprojektiini, mutta aiheesta ei kuitenkaan ollut sopivaa tietoa saatavilla, joten päätin perehtyä paremmin aiheeseen opinnäytetyön avulla. Työssä käsiteltiin ohjelmistokehyksiä yleisellä tasolla, mikrokehysten ominaisuuksia, niiden mahdollisia käyttötilanteita ja toteutettiin esimerkkisovellus Flask-mikro-ohjelmistokehyksellä.    Opinnäytetyön tuloksena esiteltiin, mitä mikrokehykset ovat, ja saatiin selville, että niille on oma paikkansa suurten ohjelmistokehysten rinnalla. Tehtyjen havaintojen tuloksena löydettiin käyttötilanteita, joissa mikrokehysten käytöllä voidaan saavuttaa erityistä etua perinteisiin ohjelmistokehyksiin verrattuna: 1) ne soveltuvat erityisen hyvin pieniin ohjelmistoprojekteihin, joissa nopea käyttöönotto ja valmiin sovelluksen esillesaaminen on tärkeää, 2) ne ovat yleensä rakeenteeltaan hyvin modulaarisia, minkä ansiosta sovelluksiin voi valita haluamiaan toimintoja laajennusosien avulla, ydinominaisuuksia, kuten tietokantaa ja templaattijärjestelmää myöten, 3) ne ovat suunniteltu HTTP-pyyntöjen helppoon käsittelyyn, minkä vuoksi ne sopivat erityisen hyvin Web-palveluiden suunnitteluun.  Työn esimerkkisovelluksen ymmärtäminen edellyttää Pythonin ja perus-web-tekniikoiden perusteiden hallitsemista.
Oppaan tuottaminen : PHP Yii Framework
Web-sovellus Django-sovelluskehyksellä
MALTTI – työkalu matahiilisen aluekehityksen tueksi
Maemo 5 ja Windows Phone 7 – Sovelluskehitysprosessien vertailu
Infomonitorin toteutus CakePHP-sovelluskehyksellä
Mobiilisovellusten toteutustekniikat
Tiivistelmä: Insinöörityön tavoitteena oli uudistaa metsätalousalan yrityksen toiminnanohjausjärjestelmä. Uudistamisen tarve oli syntynyt sovelluksen elinkaaren aikana tehtyjen laajennusten ja muutosten määrän kasvaessa niin suureksi, että jatkokehitys oli alkanut muuttua kohtuuttoman työlääksi. Uudistamisen yhteydessä haluttiin päivittää samalla sivuston ulkoasu täsmäämään aiemmin uusitun yrityksen ilmeen kanssa ja käyttöliittymää haluttiin kehittää helpommin ja nopeammin käytettäväksi. Projektissa oli tarkoitus uudistaa järjestelmä senhetkisten toimintojen kanssa, minkä jälkeen sovellusta voitaisiin ryhtyä laajentamaan ja kehittämään. Feelforest Oy:n kanssa käytiin keskustelua, onko sovellus järkevä kirjoittaa kokonaisuudessaan uudelleen paremmalla rakenteella toimivaan muotoon vai olisiko olemassa valmiita alustoja, joiden päälle sovellus voitaisiin siirtää. Sisällönhallintajärjestelmät osoittautuivat tutkimuksissa riittämättömiksi, mutta tutkimuksen aikana löydettiin ohjelmistokehyksiä, joiden avulla uudistaminen olisi järkevää toteuttaa. Ohjelmistokehyksistä vertailtiin kahta parasta ehdokasta, joista lopulta valittiin toinen. Ehdokkaina olivat CakePHP- ja Zend-ohjelmistokehykset. Valituksi kehykseksi päätyi CakePHP sen tarjoamien nopean kehityksen malleihin perustuvien toiminnallisuuksien ja toimivaksi todetun tietokantayhteysjärjestelmän vuoksi. Sovelluksen uudistettu versio haluttiin alun perin toimimaan vanhan tietokannan päällä, joten CakePHP tarjosi tähän parhaat työkalut. Sovelluksen toiminnallisuudet laajenivat jo uudistamisvaiheessa asiakkaan toiveiden myötä, joten alkuperäisestä tietokannan yhteensopivuudesta jouduttiin luopumaan, mutta vanhan tietokannan siirrettävyys säilytettiin uuden sovelluksen tietokannan pohjana. Uudistamisen aikana sovellus sai uuden ulkoasun ja nykyaikaistettuja toiminnallisuuksia varsinkin käyttöliittymätasolla. Sovelluksen tärkeimpiä toimintoja järkeistettiin, ja kehitettiin uusia ratkaisuja työskentelyn tehostamiseksi. Uutena lisänä kehitettiin alihankkijoille suunnattu oikeustaso ja pääsy järjestelmään. Uusi ForestFile2-sovellus otettiin käyttöön onnistuneesti, ja kehityssuunnitelmat saivat jatkoa uusien ominaisuuksien ehdotusten ja toiveiden muodossa.
IoT-protokollat
Toiminnanohjausjärjestelmän uudistaminen
Skriptikielet pelimoottoreissa
Asiakashallinta- ja laskutusjärjestelmän tuottaminen symfony 1.4 sovelluskehyksellä
AngularJS web-sovellusten kehityksessä
Modulaarinen web-sovelluskehys
PhoneGap-ohjelmistokehyksen hyödyntäminen alustariippumattomassa mobiilisovelluskehityksessä
HTML5:n hyödyntäminen mobiililaitteissa
Kelassa on tällä hetkellä käynnissä mittavaa etuustietojärjestelmien uudistushanke. Hankkeen myötä tullaan siirtymään entistä enemmän Java ohjelmointikielen käyttöön. Kelalla ei ole tällä hetkellä käytössä yhtenäistä käytäntöä Java sovelluskehittäjien suorittamalle yksikkötestaukselle.     Tämän opinnäytetyön tavoitteina on kartoittaa Kelan sovelluskehittäjien tämänhetkisiä yksikkötestauskäytäntöjä, yksikkötestauksen sovelluskehysten ja menetelmien tuntemusta sekä käytännön esimerkein testataan miten JUnit sovelluskehys soveltuu yksikkötestauksen toteuttamiseen. Tavoitteena on myös tutkia miten yksikkötestauksen käyttöä Kelassa olisi mahdollista jatkossa kehittää.    Opinnäytetyön teoriatausta esittelee testausprosessin yleisellä tasolla ja keskittyy yksikkötestauksen kuvaukseen tarkemmalla tasolla. Yksikkötestauksesta esitellään sen yleisiä määritelmiä, siitä saatavia hyötyjä sekä käyttöönotossa huomioonotettavia haasteita. Yksikkötestausmenetelmistä esitellään testivetoinen sovelluskehitys. Sovelluskehyksistä esitellään JUnit, joka on muodostunut Java- yksikkötestauksen standardiksi. Monimutkaisten sovellusten yksikkötestauksen yhteydessä esitellään mock- objektit, sekä pohditaan EJB- sovelluksen yksikkötestaamisen asettamia haasteita.     Tutkimusmenetelminä käytettiin Kelan Java sovelluskehittäjille tehtyä kyselyä. Kyselyn lisäksi toteutettiin kaksi käytännön esimerkkiä yksikkötestauksen toteuttamisesta JUnit sovelluskehyksellä.    Kelan nykyisten yksikkötestauskäytäntöjen kartoituksen lisäksi opinnäytetyön tuloksina saatiin selville se, että JUnit on sopiva sovelluskehys, joka voisi riittää Kelan yksikkötestaustarpeisiin. Testien toteutukseen tosin sisältyy runsaasti haasteita. Tutkimuksen tuloksena saatiin myös alustava selvitys tulevista koulutustarpeista, sekä ehdotus jatkotutkimuksesta.
Ohjelmistokehysten hyödyntäminen verkkopalvelun kehitystyössä
Ruby on Rails -ohjelmointi
Web-ohjelmistokehys Django ja sen suorituskyky verrattuna Web2Py- ja Flask-kehyksiin
Sähköisen ilmoitustaulun toteuttaminen Codeigniter -ohjelmistokehyksellä
MVC-arkkitehtuuria hyödyntävän web-ohjelmistokehyksen toteutus
Qt-sovelluksen uudelleenkirjoittaminen Android-käyttöjärjestelmälle
Sovelluskehitys Symfony-ohjelmistokehyksellä
Verkkopalvelun tietomalli ja informaatiosisällön säilyvyydenhallinta ketterässä ohjelmistoprojektissa
Usean alustan mobiilisovelluskehitys
Yksisivuisten web-sovellusten kehittäminen Angular 2 -sovelluskehyksellä
Laiteohjaus web-selaimen kautta koneautomaatiossa  : Raspberry pi & WebIOPi
Automatisoitu ohjelmistotestaus verkkosovellusten kehittämisessä
Python-mikro-ohjelmistokehykset web-ohjelmoinnin apuvälineenä
WWW-perustaisen sovelluskehyksen suunnittelu ja toteutus
Alustariippumattoman 2D-mobiilipelin prototyypin kehitys Cocos2d-x-pelimoottorilla
HTML5 sovellusalustana
Tässä opinnäytetyössä selvitettiin millä tavalla web-sovelluksen autentikointi ja auktorisointi olisi järkevintä toteuttaa web-sovelluksessa tilaajan vaatimusten mukaisesti. Pääpaino työssä oli Claims-pohjaisessa autentikoinnissa, mutta työn loppupuolella mukaan selvitykseen otettiin myös Claims-pohjainen auktorisointi. Auktorisointia verrattiin paremmin tunnettuun roolipohjaiseen auktorisointiin ja näin pyrittiin saamaan selville sen tuomat edut. Opinnäytetyössä on esitelty Claims-pohjaisen autentikointijärjestelmän perusperiaatteet ja käyty läpi muutamia esimerkkitapauksia, jotka mahdollistaisivat alkuvaatimusten mukaisen järjestelmän toteuttamisen. Työssä esiteltyjä tekniikoita ei testattu käytännössä aikataulullisista syistä. Työn lähdemateriaalina on käytetty pääasiassa verkosta löytyviä e-kirjoja ja lisäksi useita Internetistä löytyviä artikkeleita. Työn aikana kerätyn tiedon perusteella Claims-pohjainen autentikointi ja auktorisointi ovat tällä hetkellä parhaita tapoja toteuttaa web-sovellukseen toimiva käyttäjähallinta. Ne tuovat sovellukseen modulaarisuutta ja tuovat sitä kautta sovelluksen ylläpidettävyyteen huomattavasti helpotusta. Tekniikka mahdollistaa myös käyttäjähallinnan integroimisen muiden yritysten järjestelmiin, jolloin sovelluksen käyttäjälle riittää ideaalisessa tapauksessa yksi käyttäjätunnuksen ja salasanan yhdistelmä usean eri sovelluksen käyttöön.
Asiakirjasovelma Vaadin-sovelluskehyksellä
Maatalouslomituksen palvelusuunnitelmien hallintajärjestelmä
WWW-palvelun suunnittelu ja toteutus : muistutusohjelmisto
Tikettijärjestelmän prototyypin kehitys Grails-sovelluskehyksellä
Tiivistelmä:Tämän työn  aiheena  oli kehittää TAG Systems Finland Oy:n tuotannon tarpeisiin toteutettu  käyttäjänhallinta -  ja sisäänkirjautumisjärjestelmä korvaamaan vanha, käytössä oleva järjestelmä. Tavoitteena oli luoda järjestelmä joka mahdollistaa käyttäjien hallinnoinnin keskitetysti palvelimelta, kaksinkertaisen tunnistautumisen älykortin ja PINin kanssa, sekä monen käyttäjän jaettu istunto. Järjestelmän pohjana käytettiin avoimen lähdekoodin pGina -ohjelmistoa, joka mahdollistaa  lisäosarajapintansa myötä omien tunnistautumislogiiko  iden luonnin Windows-käyttöjärjestelmän sisäänkirjautumisprosessiin. PGinaan kehitettiin C# -ohjelmointikielellä  lisäosa joka toteuttaa halutun kaksinkertaisen tunnistautumisen mahdollistavan logiikan. Lisäksi kehitettiin avustavia sovelluksia hallitsemaan  muita järjestelmän toiminnallisuuksia, kuten PINin vaihtoa ja työaseman lukitusta. Työn lopputuloksena syntyi ennalta asetetut vaatimukset toteuttava järjestelmä, joka on valmis vietäväksi tuotantoympäristöön testaukseen. Järjestelmä toimii hyvänä alustana  tulevaisuudessa tapahtuvalle jatkokehitykselle, kuten biometrisen tunnistuksen lisäämiselle. Johtopäätöksenä työstä voi vetää, että avoimen lähdekoodin järjestelmät voivat toimia hyvänä pohjana yritysten omille ratkaisuille. Ilman pGinaa järjestelmän kehitys olisi ollut erittäin hankalaa tai se olisi pitänyt ostaa toiselta taholta.
Käyttäjänhallintajärjestelmä PK-yrityksen tuotannon  tarpeisiin
Tiivistelmä: Insinöörityössä perehdyttiin ohjelmistokehysten hyödyntämiseen pienimuotoisen verkkopalvelun kehityksessä. Kehyksen käytöllä pyrittiin tehostamaan kehitettävän palvelun toteuttamista. Ohjelmistokehykset tarjoavat sovellusta varten rungon, ja niiden pääasiallisena tarkoituksena on tehostaa ohjelmistokehitystä. Kehykset eivät itsessään ole toimivia sovelluksia, vaan sellainen saadaan aikaiseksi täydentämällä kehysten tarjoamaa runkoa. Kehysten arkkitehtuuria noudattamalla saavutetaan rakenteeltaan modulaarinen, helposti laajennettava sovellus. Toteutukseltaan kehykset hyödyntävät laajalti ohjelmistotekniikan suunnittelumalleja, jotka ovat yleisiä kuvauksia jonkin tietyn ongelman ratkaisemiseksi. Työn perusteella saatiin luotua kattava kuva ohjelmistokehysten toiminnasta ja niiden tarjoamista ominaisuuksista. Näiden ohella perehdyttiin myös kehysten toimintaan liittyviin suunnittelumalleihin. Tietojen pohjalta pystyttiin tekemään valinta käytettävästä kehyksestä ja hyödyntämään sitä tehokkaasti. Työn ohessa toteutetun verkkopalvelun luominen käytetyn kehyksen avulla sujui sille asetettujen tavoitteiden mukaisesti. Kehyksen käytöllä saavutettiin selvä hyöty verrattuna siihen, että sovellus olisi rakennettu tyhjän päälle. Toteutus olisi kuitenkin ollut mahdollista myös monella muulla kehysratkaisulla. Työn tekeminen tarjosi myös hyvät edellytykset muiden kehysten käyttämiselle, sillä suurin osa niistä perustuu samoihin toimintamalleihin. Asiakasyrityksen ja sen asiakkaiden puolelta palaute verkkopalvelusta on ollut positiivista, ja yrityksen kannalta se on toiminut myös tärkeänä maineenhallinnan työkaluna.
Pulpperin automaatiopäivitys
VirtualTampere-mobiilisovelluksen suunnittelu ja toteutus iOS-alustalle
Sovelluskehyksen kehittäminen Unity-pelimoottorille
HTML5 ja mobiilisovellukset
Käyttöliittymäkehitys kosketuskäyttöisille älypuhelimille
Kommunikaatio-ohjelmistokehityksen suunnittelu ja toteutus
Varasto- sekä pakkaamishallintajärjestelmän toteutus Cakephp sovelluskehyksellä
Tiivistelmä: MALTTI – työkalu matahiilisen aluekehityksen tueksi. Tässä työssä esitellään Eficode Oy:n asiakkaalle Aalto -yliopistolle tehtyä MALTTI -projektia. MALTTI on web-pohjainen järjestelmä, jonka toteuttamiseen valittiin Ruby on Rails -ohjelmistokehys. Sovelluksen kehitysympäristönä toimi Linux pohjainen Ubuntu, sekä avoimen lähdekoodin kehitysympäristö Aptana Studio 3. Sovelluksella pystyy simuloimaan alueen muodostamia hiilijalanjäkiä jopa 50 vuoden aikavälillä. MALTTI projektin tuotanto aloitettiin keväällä 2012 ja päärahoittajana on   toiminut EAKR. Sovelluksen avulla toivotaan parantamaan alueiden rakentamisen ja käytön aikaisia hiilijalanjälki päästöjä, ottamalla huomioon hiilijalanjälkeen vaikuttavat tekijät jo suunnitteluvaiheessa. Järjestelmän tuottamiseen käytettiin Scrum vaihejakomallia ja testivetoisen kehityksen menetelmää.Projektia toteutettiin kolmessa sprintissä, yhteensä noin kaksi kuukautta. Kolmannen sprintin jälkeen asiakkaalle saatiin toteutettua toimiva järjestelmä ja tällä hetkellä järjestelmä on asiakkaan testattavana. Jokaisen sprintin jälkeen oli asiakkaan   luona palaveri jossa kerrottiin edistymisestä ja selvitettiin oliko tullut kysymyksiä tai ongelmia projektin suhteen.
Windows Phone : sovelluskehitys
Sähköisen ilmoitustaulun toteuttaminen Codeigniter-ohjelmistokehyksellä
PhoneGap-ohjelmistokehyksen hyödyntäminen alustariippumattomassa mobiilisovelluskehityksessa
Tutkin opinnäytetyössäni web-trendejä ja niiden vaikutuksia käyttäjäkokemukseen. Olen tutustunut aiheeseen aikaisemminkin erinäisten artikkeleiden kautta, mutta halusin laajemman näkemyksen tämän hetken web-suunnittelun trendeistä, jotta voisin paremmin käyttämään tietoa hyväkseni työssäni. Tutkittuani trendejä, rakensin niiden pohjalta sivuston, joka toimii omana työnäytteenäni. Hain tietoa web-trendeistä internetistä ja alan kirjallisuudesta. Käytin hyväkseni myös jo aiemmin työelämässä ja harrastuneisuuden kautta oppimaani tietoa. Yksi opinnäytetyöni tavoitteista oli myös tutustua yhteen tämän hetken suosituimmista sovelluskehyksistä, Bootstrapiin. Käytin sitä apunani omaa sivustoani tehdessäni. Sovelluskehyksen käyttö ei kuitenkaan osoittautunut tehokkaimmaksi mahdolliseksi tavaksi tehdä yksinkertaisempia sivuja. Bootstrap ei myöskään kaikilta osin vastannut nykyisten trendien asettamia vaatimuksia. Esimerkiksi mobiilikäyttäjien käyttäjäkokemuksen huomiointi oli osittain puutteellista Bootstrapin sisäänrakennetuissa lisäosissa. Suurimmat web-trendit tällä hetkellä ovat responsiivisuus, sisällön ja mobiililaitteille suunnittelun laittaminen etusijalle (Content First ja Mobile First) ja kaksiulotteinen suunnittelu (Flat design). Kaikki nämä tähtäävät käyttäjäkokemuksen parantamiseen mobiililaitteilla. Mobiiliselaaminen on yleistynyt huomattavasti viime vuosina ja internet on kehittymässä koko ajan mobiilimpaan suuntaan. Suunnittelijat eivät voi enää ennustaa millaisella laitteella ja missä tilanteessa käyttäjä heidän suunnittelemansa sivuston näkee. Hyvä käyttäjäkokemus syntyy, kun pyritään tarjoamaan kaikille laitteille sama sisältö, yhtenäinen visuaalinen ilme ja otetaan huomioon suorituskyky hitaammillakin internetyhteyksillä. Kaiken kaikkiaan onnistuin saavuttamaan tavoitteeni hyvin. Tiedän nyt enemmän modernin internetin asettamista vaatimuksista web-suunnittelijalle ja osaan käyttää tietoa hyväkseni työssäni. Tietämykseni web-trendeistä on syventynyt ja pystyn paremmin ottamaan huomioon erilaiset päätelaitteet suunnittelutyössäni. Opinnäytetyöni myötä olen kiinnostunut yhä enemmän käyttäjäkokemus- ja käyttöliittymäsuunnittelusta. Aion jatkossa paneutua näihin aiheisiin syvemmin.
WWW-sovelluskehys – Yii Frameworkin soveltaminen
Geomagneettinen sisätilapaikannus Android älypuhelimella
Monialusta-mobiilisovelluksen koontiympäristö
Tässä opinnäytetyössä suunniteltiin ja toteutettiin tulevaisuudessa perustettavan yrityksen tarpeisiin soveltuva MVC-arkkitehtuuria sekä signaalit ja slotit -mekanismia hyödyntävä web-ohjelmistokehys. Työssä tutustuttiin myös yleisesti ohjelmistokehyksiin, MVC-arkkitehtuuriin ja signaalit ja slotit -mekanismiin. Työn tavoitteena oli toteuttaa toimiva ohjelmistokehys, joka sisältää yksinkertaisen web-sovelluksen tekoon vaadittavat välttämättömät osat. Työn suunnitteluvaiheessa päätettiin, että ohjelmistokehyksen tulisi käyttää hieman muunneltua MVC-arkkitehtuuria, jolla onnistuttaisiin välttämään alkuperäisen arkkitehtuurin heikkouksia. Lisäksi ohjelmistokehys tuli toteuttaa sillä ajatuksella, että perustettavan yrityksen olisi yksinkertaista kehittää tuotosta tulevaisuudessa. Koska ohjelmistokehyksen asennus ja käyttöönotto WWW-palvelimella haluttiin saada mahdollisimman nopeaksi ja yksinkertaiseksi, toteutuskieleksi valikoitui PHP-komentosarjakieli. Näin ollen WWW-palvelimelle ei tarvitse asentaa mitään ylimääräisiä paketteja, vaan palvelinohjelmisto ja PHP-tulkki riittävät. Työn lopputuotoksena saatiin perustettavan yrityksen tarpeisiin soveltuva ohjelmistokehys, jota se voi hyödyntää tulevaisuudessa tehtävissä projekteissa. Ohjelmistokehyksen ytimessä tehtyjen ohjelmakoodiratkaisujen ansiosta tuotosta on yksinkertaista kehittää tulevaisuudessa. Työn tuloksena päädyttiin johtopäätökseen, että MVC-arkkitehtuuri on PHP:n suoritustavan huomioon ottaen hyvin sopiva web-ohjelmistokehysten ohjelmistoarkkitehtuurityyliksi.
Www-sovelluskehitys Vaadin-kehyksellä
Android-sovelluksen kääntäminen PhoneGap-monialustasovellukseksi
Claims-pohjainen autentikointi ja auktorisointi
Web-sovelluskehitys AngularJS:llä
Tässä opinnäytetyössä tuotettiin työn toimeksiantajalle selaimella toimivan asiakashallinta- ja laskutusjärjestelmää. Järjestelmän on tarkoituksena tulla olemaan taloudellisesti hyödynnettävissä. Järjestelmän tavoitteena on helpottaa asiakashallinnointia ja asiakkaiden laskuttamista.     Työn laajuuden vuoksi on järjestelmän sovittu kehitettävän symfony 1.4 PHP sovelluskehyksellä ja ohjelmistokehitysmenetelmäksi on sovellettu joitakin SCRUM menetelmän piirteitä. Symfony sovelluskehyksellä voidaan nopeasti tuottaa verkkosovelluksista tuloksia. Tulokset ovat toimeksiantajalle demonstroitavissa jokaisen SCRUM sprint jakson päättyessä. Jokaisen jakson päättyessä toimeksiantaja on päässyt vaikuttamaan järjestelmän kehityksen suuntaa.      Järjestelmän kehittämisen alkuvaiheessa käytiin toimeksiantajan kanssa vaatimukset lävitse. Vaatimuksista tehtiin käyttäjätarinoita, jonka pohjalta aloitettiin järjestelmän suunnitteleminen ja toteuttaminen. Järjestelmän suunnitteleminen alkoi tietokannan suunnittelemisella. Toimeksiantajan hyväksyttyään tietokanta suunnitelman alkoi järjestelmän toiminnallisuuden toteuttaminen. Toiminnallisuuden toteuttaminen seuraa automatisoitujen testien kirjoittaminen.    Opinnäytetyön tuloksena syntyi asiakashallinta- ja laskutusjärjestelmä. Järjestelmän vaatimukset olivat muuttuneet tuottamisen aikana. Tämä näkyy joidenkin toiminnallisuuksien puutteelta. Vaikka joitakin toiminnallisuudet puuttuvat alkuperäisestä vaatimuksesta, nämä eivät olleet esteenä järjestelmän valmistumiselle. SCRUM-menetelmän perusidea on, että sprintin päättyessä on toimintakelpoinen tuote.
Selainpohjaisen varausjärjestelmän suunnittelu
Tässä opinnäytetyössä tutkitaan HTML5:n käyttöä mobiilisovelluskehityksessä. Ja erityisesti juuri työn tekohetkellä ajankohtaista tilannetta siitä, miten HTML5:sta hyödynnetään mobiilisovelluskehityksessä verrattuna natiivisovelluskehitykseen. Tutkimuksen aiheena on myös HTML5:n uusien video- ja audioelementtien käyttömahdollisuudet ja tuet mobiiliselaimilla ja mobiilisovelluksissa. Osana tätä työtä toteutettiin yksinkertainen HTML5 testisovellus käyttäen PhoneGap kehitysympäristöä, jolla esitellään videoelementin käyttöä alustariippumattomassa sovelluksessa. Itse tutkimus toteutettiin kirjallisuuskatsauksena, jossa pyrittiin vastaamaan tutkimuskysymyksiin kirjallisuuden eli tässä tapauksessa pääosin web-lähteiden avulla. Tämä opinnäytetyö toteutettiin syksyllä 2013 tutkimusryhmässä, jonka tehtävänä oli tutkia ajankohtaisia tietoteknisiä ilmiöitä. Tutkimuksessa selviää tämän hetkinen tilanne siitä kuinka HTML5:sta käytetään kokoajan enemmän mobiilisovelluksissa ja mobiilisivustoilla. Tulokset kertovat myös kuinka HTML5:n tarjoamien video- ja audioelementtien tuet ovat kasvaneet mobiiliselaimissa. Tutkimuksessa selviää myös kuinka tutkimuksen aikainen tilanne on ongelmallinen videoelementin pakkausmuotojen suhteen. Tämän hetkisen videon pakkausmuotojen tuen suhteen mobiiliselaimissa voidaan todeta, että on tärkeää tarjota takaisinpäin oleva tuki tai vähintäänkin linkki, josta videon voi ladata.
Julkaisujärjestelmän ja ohjelmistokehyksen välissä  -  ohjelma kevyiden  web-sovellusten toteuttamiseen
Sähköisten allekirjoitusten arkistointisovellus
Tämän opinnäytetyön aiheena on ohjelmistotestaus ja ohjelmistotestauksen parantaminen toimeksiantavassa yrityksessä. Toimeksiantajana työlle toimii CGI Suomi Oy. CGI:n osaamista on IT-alan konsultointi, IT-infrastruktuuriratkaisut, IT- ja liiketoimintaprosessien ulkoistamispalvelut sekä tietojärjestelmien integraatiot. CGI:n asiakkaisiin kuuluvat julkishallinto, mutta myös suuret ja keskisuuret yritykset. CGI Suomi työllistää yli 3000 henkilöä. CGI on maailmanlaajuinen yritys ja se on Suomen toiseksi suurin IT-palveluyritys. Opinnäytetyön tavoitteena oli parantaa toimeksiantavan yrityksen sovellusten laatua ja luotettavuutta. Opinnäytetyön tarkoituksena oli ottaa selville, mitä kaikkia websovellusten testaamiseen tarkoitettuja sovelluskehyksiä on tarjolla ja mitkä näistä sovelluksista tarjoaisivat toimeksiantavalle yritykselle parhaat hyödyt. Tarkoituksena oli myös luoda automatisoitu testiympäristö käyttäen parhaaksi havaittuja menetelmiä ja työkaluja. Automatisoitu testiympäristö parantaa ohjelmistojen laatua ja helpottaa sovelluskehittäjien työtä. Ohjelmistotestauksen kehittämiseen ja automatisointiin käytettiin Selenium-sovelluskehystä. Selenium tarjoaa käyttäjälle yksinkertaisen mutta tehokkaan tavan automatisoida websovellusten testaamisen. Seleniumilla tehdyt testit automatisoidaan käyttäen Jenkins CI sovellusta. Jenkins hoitaa testien automaattisen ajamisen ja ilmoittaa kehittäjille testien tulokset.
MALTTI – työkalu matahiilisen aluekehityksen  tueksi
Releen asetustyökalu Qt:lla
Web-sovelluksen toteutus Catalyst-ohjelmistokehyksellä
Sovelluskehyksen valinta : case Mainostoimisto Värikäs Oy
MVC-pohjaisten Internet-sovelluskehysten arviointi
ProcessWire-järjestelmän perusteet kehittäjille
Salesforce.comin ja Digium Enterprisen integraatio
C#-ohjelmointi
Legacy-järjestelmän uudistaminen : case: Pupesoft
Web-sovelluksen kehitysympäristön valinta
Tämän opinnäytetyön tarkoituksena oli suunnitella ja rakentaa tehtävänhallintasovellus toimeksiantajan käyttöön. Toimeksiantajana toimi kaarinalainen mainostoimisto A1 Media Oy. Yrityksellä oli sovellukselle tarvetta, sillä mikään markkinoilla oleva tehtävänhallintasovellus ei täyttänyt sen vaatimuksia. Tämän takia luotiin kokonaan uusi ja juuri yritykselle räätälöity sovellus. PHP-ohjelmistokehyksiin perehdytään ensin yleisesti sekä erityisesti Symfony 2 -ohjelmistokehykseen, jota työn tekemisessä hyödynnettiin. Ohjelmistokehyksistä keskitytään MVC-arkkitehtuurimallin mukaisiin ohjelmistokehyksiin ja niiden toiminnallisuuksiin. MVC-arkkitehtuurissa sovellus jaetaan kolmeen eri osa-alueeseen, eli malliin (model), näkymään (view) sekä ohjaimeen (controller). Näin saadaan ohjelmakoodi jaettua selkeisiin osiin, mikä helpottaa ohjelmakoodin luettavuutta ja ylläpitoa. Ohjelmistokehykset tarjoavat ohjelmistosuunnittelijalle valmiita työkaluja ohjelmiston toteuttamiseksi eikä ohjelmointityötä tarvitse aloittaa aivan tyhjästä. Toisin kuin sisällönhallintajärjestelmät, ohjelmistokehykset eivät rajoita sovelluskehittäjän työtä, vaan antavat vain työkaluja ohjelmoinnin tueksi. Symfony 2 onkin pitkälle optimoitu PHP-ohjelmistokehys, joka on parhaimmillaan juuri suurissa ohjelmistoprojekteissa. Lähes kaikissa suurissa ohjelmointiprojekteissa käytetäänkin nykyään jotain valmista ohjelmistokehystä alustana, vaikka varsinainen sovellus luodaan lähes tyhjästä.
Tietokannan mallinnus ja luonti Entity Framework 4.0 - sovelluskehyksellä
Intranetin suunnittelu ja toteutus
Tiivistelmä: PhoneGap-ohjelmistokehyksen hyödyntäminen alustariippumattomassa mobiilisovelluskehityksessä. Insinöörityössä selvitettiin PhoneGap-ohjelmistokehyksen hyödyntämistä alustariippumattomassa mobiilisovelluskehityksessä ja sitä, millaisia haasteita sen käyttöönotto luo sovelluskehittäjälle. Insinöörityö toteutettiin Suomen Punaisen Ristin Veripalvelulle. Insinöörityössä käytiin läpi PhoneGapin arkkitehtuuri, jonka käyttöliittymäkerroksena toimii WebKit-komponentti. WebKit-komponenttia ohjaa PhoneGapin JavaScript-moottori, kun taas laitteen natiivitoiminnallisuuksia ja -ominaisuuksia ohjaa PhoneGapin natiivimoottori. Työssä myös tutkittiin PhoneGapin tarjoamat ohjelmointirajapinnat ja se, miten niitä hyödynnetään mobiiliohjelmoinnissa. Insinöörityössä myös selvitettiin, miten PhoneGapiä voidaan laajentaa itsetehtyjen liitännäisien avulla. Työn lopputuloksena syntyi iOS-alustalle toteutettu mobiiliverkkosovellus, jonka avulla sovelluksen käyttäjät saataisiin käymään verenluovutuksessa nykyistä useammin muistuttamalla heitä uudesta verenluovutusmahdollisuudesta. Sovellus toimii käyttäjälle muistutustoiminnallisuuden lisäksi myös informaatiokanavana. Sovellus julkaistaan myöhemmin sovelluskaupassa. Alustariippumattoman toteutuksen ansiosta sovellus voidaan myöhemmin helposti toteuttaa myös usealle eri mobiilialustalle. Kokemukset PhoneGapin hyödyntämisestä sovelluskehityksessä osoittivat sen olevan erityisen hyödyllinen sen mahdollistaman paketoimisen ja natiivisovelluskehitystä huomattavasti loivemman oppimiskäyrän takia.
Yksikkötestauksen käyttö Kelassa
Hälytyspalvelu Java-palvelimessa : TreLab Oy
Tiivistelmä.
Opinnäytetyön aiheena oli instrumentointi- ja sovellussuunnittelu pulpperin uudistamis-projektissa. Pulpperi on osa kartonkikoneen hylynkäsittelyjärjestelmää, jolla tuotannossa syntyvä hylkykartonki kierrätetään takaisin prosessin raaka-aineeksi. Projektin tavoitteena oli tehostaa pulpperin toimintaa sekä laite- että ohjelmamuutoksin. Työn tilaajana toimi suunnittelutoimisto Polar-Automaatio Oy, ja työ suoritettiin eräällä suomalaisella kartonkitehtaalla.    Työssä laadittiin tarvittava suunnitteludokumentaatio automaation kenttälaiteasennuksia varten sekä luotiin pulpperin ohjaussovellukset automaatiojärjestelmään. Työn lähtökohtana olivat pulpperin laitetoimittajalta saadut laiteluettelot, prosessikaaviot ja toimintakuvaukset. Tehtaalla on käytössä Metso DNA -automaatiojärjestelmä, joka siten muodosti tämän työn suunnitteluympäristön.    Työhön sisältyi suunnittelun lisäksi myös uudistetun pulpperin testaus- ja käyttöönotto-vaiheet, jotka suoritettiin tehtaan vuosihuollon yhteydessä. Käyttöönotto onnistui hyvin, ja tavoiteltu toiminnallisuus saavutettiin asetetun aikataulun puitteissa. Pieniä korjauksia ohjelmiin ja säätöihin tehtiin käyttökokemusten perusteella myös varsinaisen käyttöönottovaiheen jälkeen.    Asiasanat: pulpperi, Metso DNA, instrumentointi, sovellussuunnittelu.
MeeGo-sovelluskehitys Qt-kehitysympäristössä
Tehtävänhallintasovelluksen toteutus käyttäen Symfony-ohjelmistokehystä
C # -ohjelmointi
