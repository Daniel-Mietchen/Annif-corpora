http://www.yso.fi/onto/yso/p28367 software architecture
software architecture
Web service contract design and versioning for SOA
Handbook of the secure agile software development life cycle
Real-time design patterns : robust scalable architecture for real-time systems
"This book covers both theoretical approaches and practical solutions in the processes for aligning enterprise, systems, and software architectures"--Provided by publisher.
Using EBI pattern in conjunction with service-oriented architectures
A common problem with most texts on requirements specifications is that they emphasize structural models to the near exclusion of behavioral models―focusing on what the software is, rather than what it does. If they do cover behavioral models, the coverage is brief and usually focused on a single model. Modeling Software Behavior: A Craftsman's Approach provides detailed treatment of various models of software behavior that support early analysis, comprehension, and model-based testing. Based on the popular and continually evolving course on requirements specification models taught by the author at universities and corporate environments, the text covers six behavioral models―providing the background behind these models and the required mathematics. As evidence of models at work, the author introduces eleven continuing examples. Five of these examples are illustrated with the six models, allowing readers to easily compare the expressive power of the various models. The examples chosen reflect a wide variety of behavioral issues. Providing complete coverage that includes flowcharts, decision tables, finite state machines, two variations of Petri Nets, and StateCharts, this book will help students develop the understanding of the expressive capabilities and limitations of models of system behavior needed to make informed and appropriate choices among different models when confronted with new challenges.
Situation awareness in environmental monitoring : concepts, implementation, applications
Essential Software Architecture
Software architecture : foundations, theory, and practice
Optimization of the preprocessing steps of MEG measurement data in Meggie application
Service-oriented architecture : concepts, technology, and design
Tracking what is happening on a website in realtime is invaluable. The objective of this thesis was to start and launch the first version of Snowfinch, an open source realtime web analytics application. The thesis report contains up-to-date fundamentals of web analytics; reasoning behind the most important and difficult technical decisions in the project; product development methodologies; and an overview of the resulting application. Understanding visitors is the key to a site's success. Research shows that the amount of insights provided by clickstream data is small in comparison to the amount of data gathered. Even though there is much more to web analytics than clickstream data, the fact is that it is the only data that can be collected and analyzed exclusively by software, thus the need to optimize its use. With the current use and importance of social media, being able to act quickly is a business differentiator. Visualizing data in realtime is crucial to a fast response. Choosing an appropriate data store plays an important role in the overall performance, responsiveness, and development time of the system. The development work was sponsored by Kisko Labs Oy. Snowfinch will be used both internally and in client projects. During the development period, it has tracked over half a million page views and approximately two hundred thousand visitors. Snowfinch may be used by anyone as it is, or it can act as a solid foundation on which to build customized functionality. Being free and deployable inside a private network offers a competitive advantage over commercial alternatives. The fundamental technologies used are the Ruby programming language, the Ruby on Rails web framework, and the MongoDB document-oriented database. The project was released under the MIT license, a permissive and free software license approved by the OSI (Open Source Initiative).
Wireless impact force measuring system based on acceleration
Early-phase performance evaluation of computer systems using workload models and SystemC
Object-oriented systems analysis and design using UML
Game engine architecture
Essential software architecture
Aligning enterprise, system, and software architectures
From machine learning to learning with machines:remodeling the knowledge discovery process
Self-organizing software architectures
Software development : an open source approach
The art systems of architecting
Re-engineering of software architectures : a case-study on a Nigerian Hospital Information System
Scrum in action : agile software project management and development
Computer organization and design : the hardware/software interface
Patterns of enterprise application architecture
SOA made simple : discover the true meaning behind the buzzword that is "service oriented architecture"
Applying genetic architectural synthesis in software development and run-time maintenance
TOGAF® version 9 : a pocket guide
Lean architecture : for Agile software development
Job titles like “Technical Architect” and “Chief Architect” nowadays abound in software industry, yet many people suspect that “architecture” is one of the most overused and least understood terms in professional software development. Gorton’s book tries to resolve this dilemma. It concisely describes the essential elements of knowledge and key skills required to be a software architect. The explanations encompass the essentials of architecture thinking, practices, and supporting technologies. They range from a general understanding of structure and quality attributes through technical issues like middleware components and service-oriented architectures to recent technologies like model-driven architecture, software product lines, aspect-oriented design, and the Semantic Web, which will presumably influence future software systems. This second edition contains new material covering enterprise architecture, agile development, enterprise service bus technologies, RESTful Web services, and a case study on how to use the MeDICi integration framework. All approaches are illustrated by an ongoing real-world example. So if you work as an architect or senior designer (or want to someday), or if you are a student in software engineering, here is a valuable and yet approachable knowledge source for you.
Designing a retail intelligence platform for scale
Implementing service-oriented architecture : case Fortum
Design and use of software architectures : adopting and evolving a product-line approach
Integrating applications in software company
Just enough software architecture : a risk-driven approach
Service oriented architecture for dummies
Implementing SOA : total architecture in practice
Software product line for power converters
Realtime Web Analytics
Security engineering for service-oriented architectures
Enterprise service oriented architectures : concepts, challenges, recommendations
Requirements modelling and specification for service oriented architecture
Modeling software behavior : a craftsman's approach
Software architecture in practice
The effect of service-oriented architecture and cloud computing on software testing
Enterprise integration : the essential guide to integration solutions
Realtime web analytics
TOGAF® version 9.1 : a pocket guide
Abstract: Implementation and evaluation of service-oriented architecture in Labranet.
Comparison of software architectural styles using quality attributes
Required and optional viewpoints : what is included in software architecture?
Genetic algorithms in software architecture synthesis
Handbook of mobile systems applications and services
Agility across time and space : implementing agile methods in global software projects
Secure semantic service-oriented systems
The ways corporations build their applications has changed dramatically over the last  decades. Service-oriented architecture (SOA) has been the latest buzz in software  development. If someone had declared twenty-something years ago that the piece of code  that was being used in a financial application could be reused in a human resources  application, he/she would have been laughed out of the office. Yet, this is a reality in the  21st century.  Rounding up all the functions of applications that perform exactly the same thing, and  having just one occurrence of it, and making it available for all instead of having all similar  functionalities limited by borders, is not just cost effective but it decreases man hours spent  on developing new applications. Alongside with service-oriented architecture come new  concepts to developing such as loose coupling, reusing, services, and interoperable. The one  concept that seems to be most interesting is that functions, or services as they are named in  service-oriented architecture, are platform- and language-independent therefore available for  everyone to use.  After being introduced with service-oriented architecture, I wanted to investigate it more  deeply. As I read more about it, questions rose up: “How to develop a simple service?”, "Is  service-oriented architecture perceived differently in business than in IT?" and "How can  service-oriented architecture help bring business and IT together?" This thesis tries to find  answers to those questions through research. Also to help with this, is a case study where a  reusable service is developed and an experiment where business processes and reusable  services are being connected to each other.  The project was carried out between November 2008 and July 2009. Implementing SOA is  challenging but the results of this pilot show that it is worth the while, even though this  project developed only a simple service.
Techniques and practices for software architecture work in agile software development
Platform ecosystems : aligning architecture, governance, and strategy
SOA governance : governing shared services on-premise and in the cloud
Metaheuristics meet metamodels : a modeling language and a product line architecture for route optimization systems
Choreography modeling in embedded systems domain
Implementation and evaluation of service-oriented architecture in Labranet
Heritage in the digital era
Model driven architecture and ontology development
OfxPiMapper : projection mapping tool for the Raspberry Pi
SOA : principles of service design
Service-oriented architecture : a field guide to integrating XML and Web services
Evaluation and measurement in enterprise and software architecture management
Beautiful architecture : leading thinkers reveal the hidden beauty in software design
Distributed and cloud computing : from parallel processing to the Internet of things
Web-application internationalisation and localisation: Case: Katuma
Designing a distributed application middleware by using Windows Communication Foundation : case: sharing data between different client applications in a sheet metal industry environment
Service-oriented architecture (SOA) compass : business value, planning, and enterprise roadmap
Software development and professional practice
Dynamic aspects of industrial middleware architectures
Disciplined agile delivery : a practitioner's guide to agile software delivery in the enterprise
Web engineering : the discipline of systematic development of web applications
SOA and Web services interface design : principles, techniques, and standards
