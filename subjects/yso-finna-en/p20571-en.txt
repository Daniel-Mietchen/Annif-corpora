http://www.yso.fi/onto/yso/p20571 LISP
LISP
The limits of mathematics : a course on information theory and the limits of formal reasoning
The seasoned schemer
Concepts of programming languages
Introduction to Common Lisp
The art of the metaobject protocol
Conference record of the ... ACM Symposium on LISP and Functional Programming
The little Schemer
This book is the first definitive reference for the Clojure language, providing both an introduction to functional programming in general and a more specific introduction to Clojure's features. This book demonstrates the use of the language through examples, including features such as STM and immutability, which may be new to programmers coming from other languages. * Overview of functional programming and description of what sets Clojure apart from other languages* Detailed explanation of Clojure's special features* Examples of real-world tasks that are well-suited to Clojure's capabilities, starting with simple tasks and moving on to more complex applicationsWhat you'll learn* What Clojure is-more than just another Lisp* How to set up a Clojure environment* The structure and syntax of a Clojure program* Java interoperability* How to use Clojure for real-world tasks* Common idioms of Clojure codeWho is this book for? There are two audiences for this book: any technical person desiring to know what Clojure is and why they might want to use it, and any programmer desiring to learn and use the language. The goals of these two audiences mesh nicely, given that Clojure has several new, cutting-edge features that programmers are unlikely to have encountered before.
Computers and musical style
Common Lisp : the reference
A programmer's guide to COMMON LISP
Anatomy of LISP
An introduction to LISP
Lisp in small pieces
The elements of artificial intelligence using Common LISP
Paradigms of artificial intelligence programming : case studies in Common Lisp
Today, Java, C++ and C# being the most popular programming languages, the majority of integrated development environments are tailored for them, and, in general, for staticallytyped languages. However, dynamically-typed languages are gaining more and more popularity;  thus, integrated development environments must evolve to support them. The purpose  of this thesis was to improve the situation by creating an advanced syntax highlighting system for dynamically-typed languages. This study developed a general framework for implementing an advanced syntax highlighting system for integrated development environments. A proof-of-concept implementation was developed in Common Lisp language using Emacs. The developed framework makes it possible to create syntax highlighting system that provides sophisticated scope detection and symbol extraction systems allowing an integrated development environment for dynamically-typed languages to possess the same language analysis features as the ones designed for statically-typed languages. The study concludes that there are still many unexplored, potential improvements that could be made for integrated development environments in order to increase a programmer's productivity.
Structure and interpretation of computer programs
Training simulator gui design and programming
Practical Common Lisp
Common Lisp : the language
Smart syntax highlighting for dynamically typed languages : Case: Common Lisp in Emacs
Programming languages : design and implementation
Fundamentals of programming languages
Artificial intelligence : structures and strategies for complex problem solving
Foundations of knowledge acquisition : cognitive models of complex learning
LISPcraft
The little prover
Natural language processing in LISP : an introduction to computational linguistics
Algorithmic information theory
Land of Lisp : learn to program in Lisp, one game at a time!
Common Lisp : the index
A beginner's guide to LISP
Practical Clojure : [full introduction to Clojure, a full Lisp variant for the JVM]
History of programming languages - II
Realm of Racket : learn to program, one game at a time!
Programming paradigms in LISP
The unknowable
Proceedings of the ... ACM Conference on LISP and Functional Programming
Smart syntax highlightning for dynamically typed languages : case study: Common Lisp in Emacs
Looking at Lisp
AI algorithms, data structures and idioms in Prolog, Lisp and Java
